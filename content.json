{"meta":{"title":"GOOPHER's Blog","subtitle":"","description":"记录折腾的生活。","author":"GOOPHER","url":"https://goopher.tk","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-07-11T13:55:51.898Z","updated":"2021-05-09T13:11:37.550Z","comments":false,"path":"404.html","permalink":"https://goopher.tk/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2021-07-11T13:55:51.904Z","updated":"2021-05-09T13:11:37.609Z","comments":false,"path":"about/index.html","permalink":"https://goopher.tk/about/index.html","excerpt":"","text":"本站致力于技术类搞机教程。2020年底建站，期间使用过fluid，next等主题，现在使用的是volantis主题。"},{"title":"所有分类","date":"2021-07-11T14:14:20.265Z","updated":"2021-05-09T13:11:37.612Z","comments":false,"path":"categories/index.html","permalink":"https://goopher.tk/categories/index.html","excerpt":"","text":""},{"title":"留言","date":"2021-07-11T13:55:51.904Z","updated":"2021-05-09T13:11:37.613Z","comments":true,"path":"comments/index.html","permalink":"https://goopher.tk/comments/index.html","excerpt":"","text":"如果你有什么好的建议或者问题可以在这里留下你的留言。"},{"title":"友情链接","date":"2021-07-11T13:55:51.905Z","updated":"2021-05-16T06:46:57.100Z","comments":true,"path":"friends/index.html","permalink":"https://goopher.tk/friends/index.html","excerpt":"","text":"添加我的友链手动提交Gitee自助提交Github自助提交自助提交格式标题： GOOPHER&#39;s Blog 链接： https://goopher.tk 简介： 记录折腾的生活。 头像： https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/18DAD281896408F73F4EF594111BECA2.jpg 截图： https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210228-110252@2x.png 由于Gitee的api最近经常403，所以增加了这一个手动添加的分组，可以直接在评论区按照一下格式给我留言，我会在有时间的时候添加到数据里。 - title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 点击进入 我的friends仓库，新建并按格式提交ISSUES即可，标题请写上博客的网址。提交完成返回友链页刷新即有。 点击进入 我的friends仓库，新建并按格式提交ISSUES即可，标题请写上博客的网址。提交完成返回友链页刷新即有。 { &quot;title&quot;: &quot;&quot;, //博客名称 &quot;description&quot;: &quot;&quot;, //简介 &quot;screenshot&quot;: &quot;&quot;, //截图 &quot;url&quot;: &quot;&quot;, //网址 &quot;avatar&quot;: &quot;&quot;, //头像 &quot;group&quot;: &quot;来自GitHub的朋友&quot; //分组，请不要修改此项 }"},{"title":"打赏","date":"2021-07-11T14:14:20.265Z","updated":"2021-05-09T13:11:37.614Z","comments":false,"path":"payme/index.html","permalink":"https://goopher.tk/payme/index.html","excerpt":"","text":"如果你觉得我的文章对你有所帮助那么你可以通过这里请我喝咖啡。"},{"title":"","date":"2021-07-11T13:55:51.906Z","updated":"2021-05-09T13:11:37.614Z","comments":false,"path":"photos/index.html","permalink":"https://goopher.tk/photos/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-23T02:07:58.228Z","updated":"2022-04-23T02:07:58.228Z","comments":true,"path":"photos/photos.json","permalink":"https://goopher.tk/photos/photos.json","excerpt":"","text":"[{\"name\":\"photos\",\"children\":[\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-1.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-10.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-11.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-12.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-13.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-14.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-15.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-16.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-17.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-18.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-19.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-2.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-20.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-21.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-22.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-23.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-24.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-25.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-26.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-27.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-28.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-29.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-3.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-30.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-31.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-32.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-33.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-34.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-35.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-36.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-37.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-38.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-39.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-4.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-40.jpg\",\"2399.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-41.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-42.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-43.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-44.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-45.jpg\",\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-46.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-47.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-48.jpg\",\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-5.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-6.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-7.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-8.jpg\",\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-9.jpg\"]}]"},{"title":"","date":"2022-04-23T02:07:58.228Z","updated":"2022-04-23T02:07:58.228Z","comments":true,"path":"photos/photosInfo.json","permalink":"https://goopher.tk/photos/photosInfo.json","excerpt":"","text":"[{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-1.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-1.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-10.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-10.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-11.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-11.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-12.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-12.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-13.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-13.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-14.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-14.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-15.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-15.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-16.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-16.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-17.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-17.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-18.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-18.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-19.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-19.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-2.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-2.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-20.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-20.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-21.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-21.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-22.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-22.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-23.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-23.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-24.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-24.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-25.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-25.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-26.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-26.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-27.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-27.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-28.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-28.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-29.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-29.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-3.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-3.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-30.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-30.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-31.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-31.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-32.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-32.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-33.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-33.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-34.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-34.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-35.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-35.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-36.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-36.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-37.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-37.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-38.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-38.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-39.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-39.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-4.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-4.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-40.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-40.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-41.jpg\",\"iconID\":\"2399.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-41.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-42.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-42.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-43.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-43.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-44.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-44.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-45.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-45.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-46.jpg\",\"iconID\":\"1600.2399 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-46.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-47.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-47.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-48.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-48.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-5.jpg\",\"iconID\":\"2400.1600 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-5.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-6.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-6.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-7.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-7.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-8.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-8.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-9.jpg\",\"iconID\":\"1600.2400 Re-Zero-Rem-Mizugi-Cosplay-by-Cherryneko-Perfectly-Petite-9.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}}]"},{"title":"所有标签","date":"2021-07-11T14:14:20.266Z","updated":"2021-05-09T13:11:37.616Z","comments":false,"path":"tags/index.html","permalink":"https://goopher.tk/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-11T13:55:51.906Z","updated":"2021-05-09T13:11:37.617Z","comments":false,"path":"talk/index.html","permalink":"https://goopher.tk/talk/index.html","excerpt":"","text":""}],"posts":[{"title":"MacBook优化：降温和修改电池充电计划延长寿命","slug":"MacBook优化：降温和修改电池充电计划延长寿命","date":"2021-05-02T06:00:00.000Z","updated":"2022-04-23T02:07:05.808Z","comments":true,"path":"posts/00009.html","link":"","permalink":"https://goopher.tk/posts/00009.html","excerpt":"","text":"我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=3208ogs1k5yc0 给MacBook降温这里使用的方法是禁用睿频，当然，这会让CPU性能大打折扣。。。不过，我觉得对于笔记本来说没有睿频也还行，毕竟不指望用笔记本跑什么编译什么的，只要能看看网页文档就够了。这里使用的软件是Turbo Boost Switcher Pro这个软件，下载地址这个软件也有免费版的，但是免费的没有动态禁用睿频功能，所以还是建议使用破解的pro版，可以根据温度禁用睿频，等温度降低后还可以自动启用睿频，使用体验更好。注意，这个软件破解的需要在hosts里屏蔽它的正版检测地址，但是对于使用小猫咪的用户hosts屏蔽的方法会失效，需要自己修改小猫咪的配置。hosts屏蔽: # Turbo Boost Switcher Pro 127.0.0.1 api.rugarciap.com 小猫咪屏蔽规则： - DOMAIN-SUFFIX,api.rugarciap.com,🛑 全球拦截 如图所示： 如果没有屏蔽好，这个软件就会弹出盗版检测，导致破解失效。当然你也可以使用防火墙软件，禁止它联网。之后打开软件，在最顶栏上设置自动模式，温度太高时禁用睿频，温度降低后又重新启用睿频。 我这里设置的温度是达到80后禁用，温度降低到60后启用。我们可以使用Intel® Power Gadget 这个软件查看效果。下载地址 当然你也可以使用物理降温，散热支架之类，不过我觉得那样就要多带东西了，不符合便携的要求。当然加钱买M1的新本子或许才是最优解。 修改充电计划有时候我们把电插上后就忘记拔或者是懒得拔，但是macOS旧版本又没有限制充电至合理额度的功能，新版本的macOS虽然也加入了电池学习，但是蜜汁触发，搞不懂它是怎么想的，所以就打算自己限制一下。将锂电池的电量限制在20%-80%更有利于寿命。下载我编译好的 smc解压后打开终端，cd切换至smc目录： cd smc sudo ./smc -k BCLM -w &lt;你需要的充电限制的16进制值&gt; 注意这里不要带尖括号，如我设置的 sudo ./smc -k BCLM -w 50 16进制的50就是10进至的80，可以自己找个在线的转换一下，如果要恢复充电到100%就把50改成64。之后使用下面这个命令查看是否生效： ./smc -k BCLM -r 实际上这个可能会略有偏差，不过也够了。 可以看到我这个到85%就不再继续充电了，偏差一点问题不大。如果你在使用10.15或者更新的big sur的话也可以试试AlDente这个app，应该要比上面这个容易使用一点。点击跳转 写在最后根据温度动态禁用睿频后温度基本在可接受范围了，使用上更加舒适了，没有出现C面都烤手的情况。","categories":[{"name":"MacBook优化","slug":"MacBook优化","permalink":"https://goopher.tk/categories/MacBook%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"MacBook降温","slug":"MacBook降温","permalink":"https://goopher.tk/tags/MacBook%E9%99%8D%E6%B8%A9/"},{"name":"MacBook充电计划修改","slug":"MacBook充电计划修改","permalink":"https://goopher.tk/tags/MacBook%E5%85%85%E7%94%B5%E8%AE%A1%E5%88%92%E4%BF%AE%E6%94%B9/"}],"author":"GOOPHER"},{"title":"蓝宝石RX570开核成RX580","slug":"AMD RX570开核刷RX580 VBIOS","date":"2021-04-16T14:50:00.000Z","updated":"2021-05-09T13:11:37.555Z","comments":true,"path":"posts/00008.html","link":"","permalink":"https://goopher.tk/posts/00008.html","excerpt":"","text":"前言在开始之前，需要知道刷BIOS的风险，刷入了错误的VBIOS可能导致开机花屏、不显示等问题。刷入错误的VBIOS后需要切换双BIOS为好的那个再进入系统再在开机状态下切换回刷坏的VBIOS再刷回，如果没有双BIOS就需要使用核显或者其他好的独显进入系统后刷回。当然也可以使用编程器刷回。确认了风险之后，就可以开始操作了，本教程同样适用黑苹果玩家残血580刷570，步骤是一样的。先在显卡官网查询显卡信息，如下图所示： 目前我只知道我手里的这款RX570 4G 海外版双8pin供电的可以开核成RX580，其他显卡应该都不行了。 步骤查看显卡信息保存原来的VBIOS打开GPUZ工具，查看信息： 可以看到这里的着色器单元是2048SP，开核后这里就会变成2304SP，即满血的RX580。保存原本的BIOS：点击AMD LOGO下的分享按钮，选择保存路径保存备份正常的VBIOS。 下载刷写工具和VBIOS打开 techpowerup 这个网站，我们可以看到这里有很多的分类，我们按照信息检索，查找出我们需要的VBIOS： 到这里之后我们需要特别注意所刷写的VBIOS所支持的显存、还有显卡接口顺序等是否符合自己的显卡。以我这个为例，刚才通过GPUZ查看到显存是海力士显存，则我们需要下载的VBIOS就是支持海力士的这个。不能使用三星显存的这个，众所周知，三星的显存性能更好，基础频率更高，刷入后肯定是会花屏的。 下载好VBIOS之后，就到这个网站下载刷写工具： atiflash 开始写入VBIOS打开atiflash这个工具： 点击载入图像，选择到我们下载好的VBIOS打开。 点击程序按钮，稍等片刻 完成后重启电脑，RX570和RX580用的驱动都是同一个所以不用重装驱动。 最后打开GPUZ查看开核是否成。 我们可以看到显示的型号变成了RX580，着色器单元也变成了2304SP满血的，在黑苹果里免驱。","categories":[{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/categories/BIOS%E9%AD%94%E6%94%B9/"}],"tags":[{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/tags/BIOS%E9%AD%94%E6%94%B9/"},{"name":"教程","slug":"教程","permalink":"https://goopher.tk/tags/%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"为volantis主题添加瀑布流相册","slug":"为volantis主题添加相册功能","date":"2021-04-14T01:41:31.000Z","updated":"2021-05-09T13:11:37.598Z","comments":true,"path":"posts/7.html","link":"","permalink":"https://goopher.tk/posts/7.html","excerpt":"","text":"前言功能参考自 AIGISSS效果查看本站更多中的相册页面 目前已知的问题：1.不支持pjax2.分类功能无法使用3.懒加载无法使用，使用懒加载后图片不显示4.目前的样式可能稍显单调优势：1.可以使用GitHub action自动构建2.走jsd免费cdn加速，访问快 思路利用image-size生成图片的json，然后图片存储在GitHub利用jsd加速访问（跟白嫖GitHub做图床一样）。然后通过js生成完整的图片链接信息，生成页面。 步骤新建照片页面执行命令新建页面 hexo new page photos 在source/photos/index.md中写入以下内容 --- layout: photos comments: false meta: header: [] footer: [] sidebar: [] --- &lt;div class=&quot;ImageGrid&quot;&gt;&lt;/div&gt; 修改主题配置文件打开_config.volantis.yml文件，添加导航按钮： - name: 相册 icon: fad fa-images # pro url: photos/ 这里我使用的pro版图标，如果使用默认的图标请把icon改为fas fa-imagespjax排除：搜索pjax并添加 - /photos/ # 相册页面不支持pjax 处理照片信息这里我选择跟博客共用一个仓库，方便action自动部署。当然你也可以使用单独的一个仓库来存储，示例：photos在博客根目录新建一个photos文件夹，在里面新建一个tool.js文件，并把以下内容粘贴到tool.js中。 const fs = require(&#39;fs-extra&#39;); const path = require(&#39;path&#39;); const imageSize = require(&#39;image-size&#39;); const rootPath=&quot;photos/&quot; class PhotoExtension &#123; constructor() &#123; this.size = 64; this.offset = [0, 0]; &#125; &#125; class Photo &#123; constructor() &#123; this.dirName = &#39;&#39;; this.fileName = &#39;&#39;; this.iconID = &#39;&#39;; this.extension = new PhotoExtension(); &#125; &#125; class PhotoGroup &#123; constructor() &#123; this.name = &#39;&#39;; this.children = []; &#125; &#125; function createPlotIconsData() &#123; let allPlots = []; let allPlotGroups = []; const plotJsonFile = path.join(__dirname, &#39;../source/photos/photosInfo.json&#39;); const plotGroupJsonFile = path.join(__dirname, &#39;../source/photos/photos.json&#39;); if (fs.existsSync(plotJsonFile)) &#123; allPlots = JSON.parse(fs.readFileSync(plotJsonFile)); &#125; if (fs.existsSync(plotGroupJsonFile)) &#123; allPlotGroups = JSON.parse(fs.readFileSync(plotGroupJsonFile)); &#125; fs.readdirSync(__dirname).forEach(function(dirName) &#123; const stats = fs.statSync(path.join(__dirname, dirName)); const isDir = stats.isDirectory(); if (isDir) &#123; const subfiles = fs.readdirSync(path.join(__dirname, dirName)); subfiles.forEach(function(subfileName) &#123; // 如果已经存在 则不再处理 // if (allPlots.find(o =&gt; o.fileName === subfileName &amp;&amp; o.dirName === dirName)) &#123; // return; // &#125; // 新增标 const plot = new Photo(); plot.dirName = dirName; plot.fileName = subfileName; const imageInfo = imageSize(rootPath+dirName + &quot;/&quot; + subfileName); plot.iconID = imageInfo.width + &#39;.&#39; + imageInfo.height + &#39; &#39; + subfileName; allPlots.push(plot); console.log(`RD: createPlotIconsData -&gt; new plot`, plot); // 为新增标添加分组 暂时以它所处的文件夹为分组 let group = allPlotGroups.find(o =&gt; o.name === dirName); if (!group) &#123; group = new PhotoGroup(); group.name = dirName; allPlotGroups.push(group); console.log(`RD: createPlotIconsData -&gt; new group`, group); &#125; group.children.push(plot.iconID); &#125;); &#125; &#125;); fs.writeJSONSync(plotJsonFile, allPlots); fs.writeJSONSync(plotGroupJsonFile, allPlotGroups); &#125; createPlotIconsData(); 这里的第5行 const rootPath=&quot;photos/&quot; 这个是图片的路径第34、35行 const plotJsonFile = path.join(__dirname, &#39;../source/photos/photosInfo.json&#39;); const plotGroupJsonFile = path.join(__dirname, &#39;../source/photos/photos.json&#39;); 这个是json的输出路径，可以按需更改。之后在photos文件夹下新建任意名称的文件夹，再把照片放进去。示例： 之后安装image-size npm i -S image-size 之后执行命令 node photos/tool.js 查看source/photos/文件夹下是否生成json这里注意，如果是使用macOS的话，可能因为系统自动生成的.DS_Store文件报错，删除后.DS_Store后再执行一般就不会报错了。 删除命令 find ~ -name &quot;.DS_Store&quot; -delete 看到能正常生成后即可。 修改GitHub action配置编辑.github/workflows/下的yml文件，添加两个命令 rm -rf source/photos/*.json node photos/tool.js 这个image-size有个弊端就是如果不删除之前生成json，删除照片后再生成的json里也会有已删除的照片信息，所以建议每次修改照片后生成json前都先删除之前生成的json。示例： 添加ejs在themes/volantis/layout/目录下新建photos.ejs,并粘贴以下内容： &lt;%- js(theme.plugins.jquery) %&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/fancybox/3.5.7/jquery.fancybox.min.css&quot;&gt; &lt;script src=&quot;https://cdn.staticfile.org/fancybox/3.5.7/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;//cdn.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;../js/photos.js&quot;&gt;&lt;/script&gt; &lt;%- partial(&#39;_pre&#39;) %&gt; &lt;% page.comments = false; %&gt; &lt;div class=&#39;l_main&lt;%- page.sidebar == false ? &#39; no_sidebar&#39; : &#39;&#39; %&gt;&#39;&gt; &lt;%- partial(&#39;_partial/article&#39;, &#123;post: page, index: false&#125;) %&gt; &lt;/div&gt; &lt;%- partial(&#39;_partial/side&#39;) %&gt; 添加photos.js在themes/volantis/source/js目录下新建photos.js，并粘贴以下内容： var imgDataPath = &quot;./photos.json&quot;; //图片名称高宽信息json文件路径 var imgPath = &quot;https://cdn.jsdelivr.net/gh/Goopher97/blog_volantis_auto@main/photos/&quot;; //图片访问路径 var imgMaxNum = 50; //图片显示数量 var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; if (windowWidth &lt; 768) &#123; var imageWidth = 145; //图片显示宽度(手机端) &#125; else &#123; var imageWidth = 250; //图片显示宽度 &#125; const photo = &#123; page: 1, offset: imgMaxNum, init: function () &#123; var that = this; $.getJSON(imgDataPath, function (data) &#123; that.render(that.page, data); //that.scroll(data); that.eventListen(data); &#125;); &#125;, constructHtml(options) &#123; const &#123; imageWidth, imageX, imageY, name, imgPath, imgName, imgNameWithPattern, &#125; = options; const htmlEle = `&lt;div class=&quot;card lozad&quot; style=&quot;width:$&#123;imageWidth&#125;px&quot;&gt; &lt;div class=&quot;ImageInCard&quot; style=&quot;height:$&#123; (imageWidth * imageY) / imageX &#125;px&quot;&gt; &lt;a data-fancybox=&quot;gallery&quot; href=&quot;$&#123;imgPath&#125;$&#123;name&#125;/$&#123;imgNameWithPattern&#125;&quot; data-caption=&quot;$&#123;imgName&#125;&quot; title=&quot;$&#123;imgName&#125;&quot;&gt; &lt;img src=&quot;$&#123;imgPath&#125;$&#123;name&#125;/$&#123;imgNameWithPattern&#125;&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;`; return htmlEle; &#125;, render: function (page, data = []) &#123; this.data = data; if (!data.length) return; var html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = &quot;&quot;; let liHtml = &quot;&quot;; let contentHtml = &quot;&quot;; data.forEach((item, index) =&gt; &#123; const activeClass = index === 0 ? &quot;active&quot; : &quot;&quot;; liHtml += `&lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt; &lt;a class=&quot;nav-link $&#123;activeClass&#125; photo-tab&quot; id=&quot;home-tab&quot; photo-uuid=&quot;$&#123;item.name&#125;&quot; data-toggle=&quot;tab&quot; href=&quot;#$&#123;item.name&#125;&quot; role=&quot;tab&quot; aria-controls=&quot;$&#123;item.name&#125;&quot; aria-selected=&quot;true&quot;&gt;$&#123;item.name&#125;&lt;/a&gt; &lt;/li&gt;`; &#125;); const [initData = &#123;&#125;] = data; const &#123;children = [], name&#125; = initData; children.forEach((item, index) =&gt; &#123; imgNameWithPattern = item.split(&quot; &quot;)[1]; imgName = imgNameWithPattern.split(&quot;.&quot;)[0]; imageSize = item.split(&quot; &quot;)[0]; imageX = imageSize.split(&quot;.&quot;)[0]; imageY = imageSize.split(&quot;.&quot;)[1]; let imgOptions = &#123; imageWidth, imageX, imageY, name, imgName, imgPath, imgNameWithPattern, &#125;; li += this.constructHtml(imgOptions); &#125;); contentHtml += ` &lt;div class=&quot;tab-pane fade show active&quot; role=&quot;tabpanel&quot; aria-labelledby=&quot;home-tab&quot;&gt;$&#123;li&#125;&lt;/div&gt;`; const ulHtml = `&lt;ul class=&quot;nav nav-tabs&quot; id=&quot;myTab&quot; role=&quot;tablist&quot;&gt;$&#123;liHtml&#125;&lt;/ul&gt;`; const tabContent = `&lt;div class=&quot;tab-content&quot; id=&quot;myTabContent&quot;&gt;$&#123;contentHtml&#125;&lt;/div&gt;`; $(&quot;#imageTab&quot;).append(ulHtml); $(&quot;.ImageGrid&quot;).append(tabContent); this.minigrid(); &#125;, eventListen: function (data) &#123; let self = this; var html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = &quot;&quot;; $(&#39;a[data-toggle=&quot;tab&quot;]&#39;).on(&quot;shown.bs.tab&quot;, function (e) &#123; $(&quot;.ImageGrid&quot;).empty(); const selectId = $(e.target).attr(&quot;photo-uuid&quot;); const selectedData = data.find((data) =&gt; data.name === selectId) || &#123;&#125;; const &#123;children, name&#125; = selectedData; let li = &quot;&quot;; children.forEach((item, index) =&gt; &#123; imgNameWithPattern = item.split(&quot; &quot;)[1]; imgName = imgNameWithPattern.split(&quot;.&quot;)[0]; imageSize = item.split(&quot; &quot;)[0]; imageX = imageSize.split(&quot;.&quot;)[0]; imageY = imageSize.split(&quot;.&quot;)[1]; let imgOptions = &#123; imageWidth, imageX, imageY, name, imgName, imgPath, imgNameWithPattern, &#125;; li += self.constructHtml(imgOptions); &#125;); $(&quot;.ImageGrid&quot;).append(li); self.minigrid(); &#125;); &#125;, minigrid: function () &#123; var grid = new Minigrid(&#123; container: &quot;.ImageGrid&quot;, item: &quot;.card&quot;, gutter: 12, &#125;); grid.mount(); $(window).resize(function () &#123; grid.mount(); &#125;); &#125;, &#125;; photo.init(); 这里注意第一二行，如果使用单独的仓库存放照片，记得修改加速的链接和json的链接。 添加photos.styl样式在themes/volantis/source/css/_other目录下新建photos.styl文件，并粘贴以下内容： .ImageGrid &#123; width: 100%; max-width: 1040px; margin: 0 auto; text-align: center; &#125; .card &#123; display: flex; float: left; overflow: hidden; transition: .3s ease-in-out; border-radius: 8px; background-color: rgba(255, 255, 255, 0); padding: 1.4px; &#125; .ImageInCard &#123; display block &#125; .ImageInCard img &#123; padding: 0; border-radius: 8px; width:100%; height:100%; &#125; 记得引入这个样式文件，在style.styl文件中添加： @import &#39;_other/*&#39; 最后如果大佬完善了，请给我留言，让我学习学习。","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"使用OC引导ubuntu","slug":"使用OC引导ubuntu","date":"2021-04-08T00:30:00.000Z","updated":"2021-05-09T13:11:37.603Z","comments":true,"path":"posts/6.html","link":"","permalink":"https://goopher.tk/posts/6.html","excerpt":"","text":"步骤启用UEFI Shell工具 查找GRUB引导所在分区之后重启电脑,选择UEFI Shell进入. 进入后屏幕上会显示一些FS0、FS1等等的信息,这个就是硬盘上分区的信息. 按任意键进入输入模式,然后我们需要找到ubuntu的grub引导所在的分区.直接输入 FS0: 回车,就能进入这个分区,然后再输入ls回车,查看里面的文件,看这个是不是存grub引导的地方. 可以看到这里ubuntu引导就在FS1里,记下这个FS1. 保存map信息之后输入map &gt; maptable_linux.txt回车,信息就会保存在maptable_linux.txt这个文件里. 添加自定义引导项重启电脑进入系统,挂载EFI分区,打开刚才生成的maptable_linux.txt文件,找到我们刚才记住的FS1,然后复制对应的整串信息. 之后打开config,在自定义条目录里新增,然后把刚才复制的粘贴进去,再在路径后面加上grub的路径,注意这里的写法,需要先/再即: 粘贴的信息/\\EFI\\ubuntu\\grubx64.efi 保存重启后就可以通过OC引导Grub再进入ubuntu了. 修改GRUB引导,跳过GURB界面直接进入ubuntu系统重启进入ubuntu系统后,打开终端,输入命令: sudo gedit /etc/default/grub 输入你系统的密码回车,在弹出的编辑器里找到GRUB_TIMEOUT=10,这个就是grub的倒计时,默认的10s太久了,直接把10改成0跳过.保存后关闭编辑器,然后再执行以下命令使刚才的设置生效: sudo update-grub","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"},{"name":"OC引导多系统","slug":"OC引导多系统","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E5%A4%9A%E7%B3%BB%E7%BB%9F/"}],"author":"GOOPHER"},{"title":"升级OpenCore068","slug":"升级OC引导068","date":"2021-04-06T08:41:31.000Z","updated":"2021-05-09T13:11:37.604Z","comments":true,"path":"posts/5.html","link":"","permalink":"https://goopher.tk/posts/5.html","excerpt":"","text":"更新步骤与之前的更新步骤一致，此处就不过多赘述。如果不懂，请参看之前的更新文章: 升级OpenCore066 相关下载Kext Updater下载地址: 点击前往这次推荐一个App,叫作Kext Updater.使用它可以自动检测kext驱动和引导的更新,并自动将更新下载到桌面,我们只需要将需要更新的kext替换即可. 点击Check,检查并下载更新. 稍等片刻,在桌面上就下载好了. 此次更新config变动Booter-Quirks-新增ForceBooterSignatureUEFI下新增AppleInputUEFI-ProtocolOverrides-下删除AppleEvent 查看更新是否成功 可能会遇到的问题Q:更新后光标移动得很快.A:这是config里UEFI下没有新增AppleInput,注意更新操作时仔细对照示例文件.","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC引导升级","slug":"OC引导升级","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E5%8D%87%E7%BA%A7/"},{"name":"黑苹果教程","slug":"黑苹果教程","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"为volantis添加hls.js以在Chrome上播放m3u8视频","slug":"为volantis添加hls.js以在Chrome上播放m3u8","date":"2021-04-01T08:41:31.000Z","updated":"2021-05-09T13:11:37.601Z","comments":true,"path":"posts/4.html","link":"","permalink":"https://goopher.tk/posts/4.html","excerpt":"","text":"前言按照上一篇文章 https://goopher.tk/posts/2.html 所述，在md中插入视频要写很长一串，并且不支持主题的pjax，所以我就在想将主题原本的video标签改掉。 操作在header.ejs中引入hls.js打开themes/volantis/layout/_partial/header.ejs文件，在前添加： &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hls.js@latest&quot;&gt;&lt;/script&gt; 图示： 修改media.js打开themes/volantis/scripts/tags/media.js文件，找到第十行： return `&lt;div class=&quot;video&quot;&gt;&lt;video controls preload&gt;&lt;source src=&#39;$&#123;src&#125;&#39; type=&#39;video/mp4&#39;&gt;Your browser does not support the video tag.&lt;/video&gt;&lt;/div&gt;`; 将其修改为： return `&lt;div class=&quot;video&quot;&gt;&lt;video controls preload id=&quot;m3u8video&quot;&gt;&lt;/video&gt;&lt;/div&gt;&lt;script&gt;var video = document.getElementById(&#39;m3u8video&#39;);if (Hls.isSupported()) &#123; var hls = new Hls();hls.loadSource(&#39;$&#123;src&#125;&#39;);hls.attachMedia(video); &#125; else if (video.canPlayType(&#39;application/vnd.apple.mpegurl&#39;)) &#123; video.src = &#39;$&#123;src&#125;&#39;; &#125;&lt;/script&gt;`; 图示： 使用在md中按照原来的video标签插入即可，示例： &#123;% video https://cdn.jsdelivr.net/gh/Goopher97/videoff/text/index.m3u8 %&#125; hexo三连查看效果","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"volantis主题修改代码高亮样式","slug":"volantis主题修改代码高亮样式","date":"2021-03-31T08:41:31.000Z","updated":"2021-05-09T13:11:37.568Z","comments":true,"path":"posts/3.html","link":"","permalink":"https://goopher.tk/posts/3.html","excerpt":"","text":"前言hexo默认的代码高亮样式有时候不够好看，而highlightjs可以自己引用很多好看的样式，比如vs样式。但是它却不支持行号，因此有了这篇修改教程。 步骤修改ejs以支持行号显示打开themes/volantis/layout/_third-party/highlistjs/目录下的script.ejs文件，这里偷个懒，直接删除原来的内容后，复制下载的代码粘贴进去。 &lt;% if (theme.plugins.highlightjs.js) &#123; %&gt; &lt;%- js(theme.plugins.highlightjs.js) %&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/highlightjs-line-numbers.js@2.8.0/dist/highlightjs-line-numbers.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt; &lt;script&gt;hljs.initLineNumbersOnLoad(&#123; singleLine: true &#125;);&lt;/script&gt; &lt;% &#125; %&gt; &lt;script&gt; volantis.pjax.push(()=&gt;&#123; document.querySelectorAll(&#39;pre code&#39;).forEach((block) =&gt; &#123; hljs.highlightBlock(block); hljs.lineNumbersBlock(block, &#123; singleLine: true &#125;); &#125;); &#125;,&quot;highlightjs&quot;) &lt;/script&gt; 为其创建样式文件在themes/volantis/source/css/目录下创建_other文件夹，并在里面创建一个名为codeblock.styl的文件，其内容如下： /* for block of numbers */ .hljs-ln-numbers &#123; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; color: #ccc; border-right: 1px solid #CCC; vertical-align: top; padding-right: 5px; /* your custom style here */ &#125; /* for block of code */ .hljs-ln-code &#123; padding-left: 10px !important; &#125; 其主要是让行号和代码有个明显分界，看起来不粘在一起。引入样式：打开source/css/目录下的style.styl文件，添加以下内容： @import &#39;_other/*&#39; 禁用默认的高亮设置打开_config.yml文件，将highlight禁用： highlight: enable: false 启用highlightjs并设置样式打开_config.volantis.yml文件，启用highlightjs（即删除true前面的#号）。并设置css样式，如下： # highlight.js highlightjs: enable: true # Please set hexo.config.highlight.enable = false !!! js: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10/build/highlight.min.js css: https://cdn.jsdelivr.net/npm/highlight.js@10.6.0/styles/vs2015.css # more: https://www.jsdelivr.com/package/npm/highlight.js?path=styles 最后hexo三连查看效果。效果示例：","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"使用GitHub作为视频床","slug":"用github做视频床","date":"2021-03-31T08:41:31.000Z","updated":"2021-05-09T13:11:37.605Z","comments":true,"path":"posts/2.html","link":"","permalink":"https://goopher.tk/posts/2.html","excerpt":"","text":"效果预览var video = document.getElementById('m3u8video');if (Hls.isSupported()) { var hls = new Hls();hls.loadSource('https://cdn.jsdelivr.net/gh/Goopher97/videoff/text/index.m3u8');hls.attachMedia(video); } else if (video.canPlayType('application/vnd.apple.mpegurl')) { video.src = 'https://cdn.jsdelivr.net/gh/Goopher97/videoff/text/index.m3u8'; } 操作步骤在新建一个公开的仓库，名称任意。这里省略了。 视频文件ts切片这里使用的是ffmpeg工具，在macOS下，可以使用brew安装。其他操作系统请自行解决安装问题。 brew install ffmpeg 安装完成后，在终端中找到我们要上传的视频文件切片。 ffmpeg -i &#39;视频文件名称&#39; -c:v h264 -flags +cgop -g 30 -hls_time 5 -hls_list_size 0 -hls_segment_filename index%3d.ts &#39;index.m3u8&#39; 注意这里的视频要h.264编码，然后-hls_time 5意为5秒作为一个切片，当视频文件比较小的时候可以设置10秒20秒等作为一个切片，注意切片的大小不能超过20m，要不然没法使用jsd加速。 push到GitHub仓库建议新建一个文件夹，把切片出来的放进去，再push到仓库中，方便管理。例如： 使用的链接使用jsd加速的链接格式为： https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹名/index.m3u8 插入视频到博客中由于m3u8这类视频在Chrome等浏览器中不被支援，所以我们需要hls.js来帮助，但是直接修改hexo主题又过于麻烦，所以采用了下面这个折中的办法：在需要插入视频的md中，复制下面的代码插入： &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hls.js@latest&quot;&gt;&lt;/script&gt; &lt;video id=&quot;video&quot; controls loop=&quot;false&quot; width=&quot;100%&quot;&gt;&lt;/video&gt; &lt;script&gt; var video = document.getElementById(&#39;video&#39;); if(Hls.isSupported()) &#123; var hls = new Hls(); hls.loadSource(&#39;m3u8视频地址&#39;); hls.attachMedia(video); hls.on(Hls.Events.MANIFEST_PARSED,function() &#123; video.play(); &#125;); &#125; else if (video.canPlayType(&#39;application/vnd.apple.mpegurl&#39;)) &#123; video.src = &#39;m3u8视频地址&#39;; video.addEventListener(&#39;loadedmetadata&#39;,function() &#123; video.play(); &#125;); &#125; &lt;/script&gt;","categories":[{"name":"GitHub玩法","slug":"GitHub玩法","permalink":"https://goopher.tk/categories/GitHub%E7%8E%A9%E6%B3%95/"}],"tags":[{"name":"白嫖GitHub","slug":"白嫖GitHub","permalink":"https://goopher.tk/tags/%E7%99%BD%E5%AB%96GitHub/"},{"name":"撸资本主义羊毛","slug":"撸资本主义羊毛","permalink":"https://goopher.tk/tags/%E6%92%B8%E8%B5%84%E6%9C%AC%E4%B8%BB%E4%B9%89%E7%BE%8A%E6%AF%9B/"}],"author":"GOOPHER"},{"title":"为volantis主题添加图片轮播和热门文章二点零","slug":"为volantis主题添加图片轮播和热门文章二点零","date":"2021-03-30T08:41:31.000Z","updated":"2021-05-09T13:11:37.589Z","comments":true,"path":"posts/1.html","link":"","permalink":"https://goopher.tk/posts/1.html","excerpt":"","text":"特别鸣谢黑石大佬的思路jQuery插件库提供的模板inkss大佬的修改 修复修复了之前启用pjax后从其他页面切换回来图片轮播不显示了的问题, 操作步骤使用之前修改的使用之前修改的需要按照之前的步骤反向,把添加的东西删除,再按照下面的方法重新添加, 效果预览 添加设置项打开_config.volantis.yml文件,搜索 plugins ,在其下面添加如下: ########### 图片轮播 ############## slider: enable: false js: https://cdn.jsdelivr.net/gh/Goopher97/mycdn@1.5/slider.min.js img_1: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022629@2x.png link_1: /posts/21510.html img_2: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022959@2x.png link_2: /posts/50300.html img_3: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-023228@2x.png link_3: /posts/24004.html img_4: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/%E5%9B%BE%E6%80%AA%E5%85%BD_c3e24bc3d29796c0593475a22f3a11e0_24823.png link_4: /posts/61617.html img_5: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/shiyongvolantisgengyouya.png link_5: /posts/16065.html ########### 热门文章 ############## hot_post: ###### 热门文章1 ##### pic_one: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022351@2x.png post_one: /posts/64658.html ###### 热门文章2 ##### pic_two: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/%E5%9B%BE%E6%80%AA%E5%85%BD_bb872333f9b8822a09d329308f839556_24325.png post_two: /posts/52146.html 如图: 修改ejs打开layout/_partial/scripts/index.ejs文件, 找到 &lt;%- partial(&#39;../../_third-party/analytics/script&#39;) %&gt; 这一行,在其上面添加: &lt;% if (theme.plugins.slider.enable) &#123; %&gt; &lt;%- js(theme.plugins.slider.js) %&gt; &lt;%- partial(&#39;../../_third-party/slider/script&#39;) %&gt; &lt;% &#125; %&gt; 如图所示: 打开layout/_third-party/文件夹,在里面新建一个名为slider的文件夹,再在里面新建一个名为layout.ejs的文件,其文件内容为: &lt;div class=&quot;slider&quot;&gt; &lt;div id=&quot;slider&quot; style=&quot;width: 520px; height: 300px;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;hot_post&quot;&gt; &lt;div class=&quot;index-banner&quot;&gt; &lt;a href=&quot;&lt;%- theme.plugins.hot_post.post_one %&gt;&quot; target=&quot;_self&quot;&gt; &lt;img src=&quot;&lt;%- theme.plugins.hot_post.pic_one %&gt;&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;index-banner forpadding&quot;&gt; &lt;a href=&quot;&lt;%- theme.plugins.hot_post.post_two %&gt;&quot; target=&quot;_self&quot;&gt; &lt;img src=&quot;&lt;%- theme.plugins.hot_post.pic_two %&gt;&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 如图所示: 再新建一个名为script.ejs的文件,其内容如下: &lt;script&gt; function pjax_slider() &#123; if($(&#39;#slider&#39;)[0]) &#123; $(&quot;#slider&quot;).sliderImg(&#123; imgs: [&quot;&lt;%- theme.plugins.slider.img_1 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_2 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_3 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_4 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_5 %&gt;&quot;], link: [&quot;&lt;%- theme.plugins.slider.link_1 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_2 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_3 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_4 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_5 %&gt;&quot;], &#125;); &#125; &#125; $(function () &#123; pjax_slider(); &#125;); volantis.pjax.push(pjax_slider) &lt;/script&gt; 如图所示: 之后打开layout/index.ejs文件,找到 &lt;%- partial(&#39;_partial/archive&#39;) %&gt; 这一行,并在这一行上面添加: &lt;% if (theme.plugins.slider.enable) &#123; %&gt; &lt;%- partial(&#39;_third-party/slider/layout&#39;) %&gt; &lt;% &#125; %&gt; 如图: 新建样式打开source/css/_plugins/文件夹,在里面新建一个名为slider.styl的文件,其内容如下: .hide&#123; display: none; &#125; .slider display flex align-items center #slider&#123; @media screen and (max-width: 800px)&#123; display: none &#125; border-radius:10px position: relative; overflow: hidden; max-height:400px margin-top:auto; &#125; .slider-ul&#123; position: absolute; width: 999999999px; height: 100%; &#125; .slider-ul-li&#123; width: 520px; height: 100%; display: inline-block; &#125; .slider-ul-li-a, .slider-ul-li-a-img&#123; width: 100%; height: 100%; &#125; .slider-circlex&#123; position: absolute; bottom: 20px; right: 0; left: 0; text-align: center; &#125; .slider-circlex-ul&#123; display: inline-block; border-radius: 8px; background-color: red; background: rgba(0, 0, 0, 0.3); padding: 2px; font-size: 0; &#125; .slider-circlex-ul-li&#123; display: inline-block; width: 7px; height: 7px; background-color: #FFF; border-radius: 50%; margin: 0 4px; cursor: pointer; &#125; .slider-circlex-ul-li.active&#123; background-color: red; &#125; .slider-btn&#123; position: absolute; top: 50%; right: 0; left: 0; margin-top: -15px; &#125; .slider-btn a&#123; position: absolute; width: 30px; height: 30px; text-align: center; cursor: pointer; background-color: rgba(0, 0, 0, .5); &#125; .slider-btn-next&#123; right: -5px; border-radius: 50% 0 0 50%; &#125; .slider-btn-prev&#123; left: -5px; border-radius: 0 50% 50% 0; &#125; .slider-btn-prev-span, .slider-btn-next-span&#123; display: inline-block; width: 10px; height: 20px; margin-top: 4px; position: relative; &#125; .slider-btn-prev-span::after, .slider-btn-next-span::after&#123; content: &#39;&#39;; position: absolute; top: 50%; left: 50%; width: 7px; height: 7px; margin-top: -3.5px; &#125; .slider-btn-prev-span::after&#123; border-left: 2px solid #FFF; border-top: 2px solid #FFF; transform: rotate(-45deg); margin-left: -2px; &#125; .slider-btn-next-span::after&#123; border-right: 2px solid #FFF; border-bottom: 2px solid #FFF; transform: rotate(-45deg); margin-left: -7px; &#125; .l_main .post-list &#123; margin-top: 15px @media screen and (max-width: 800px) &#123; margin-top: 0px &#125; &#125; .hot_post display flex flex 1 flex-direction column margin-left 10px @media screen and (max-width: 800px) display none .index-banner flex 1 font-size 0 &amp;.forpadding margin-top 10px .hot_post img display inline-block width 100% border-radius 10px height 145px 如图: 如后打开同目录下的index.styl文件,找到 if hexo-config(&#39;plugins.pjax.enable&#39;) and hexo-config(&#39;plugins.pjax.animation&#39;) @import &#39;pjaxanimate&#39; 在这两行的下面添加: if hexo-config(&#39;plugins.slider.enable&#39;) @import &#39;slider&#39; 如图: 最后hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 预览效果 关于移动端不显示图片轮播这是我故意设置的隐藏,如果你需要在移动端显示,则修改slider.styl文件即可,在第10行。 #slider&#123; @media screen and (max-width: 800px)&#123; display: none &#125; border-radius:10px position: relative; overflow: hidden; max-height:400px margin-top:auto; &#125; display: none将图片轮播隐藏了,在第122行, .hot_post display flex flex 1 flex-direction column margin-left 10px @media screen and (max-width: 800px) display none 同样是display none将热门文章隐藏了,你可以直接将其删除或者修改为自己想要的样式即可。","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"为volantis主题添加图片滚动和热门文章","slug":"为volantis主题添加图片滚动和热门文章","date":"2021-03-17T04:41:31.000Z","updated":"2021-05-09T13:11:37.578Z","comments":true,"path":"posts/16539.html","link":"","permalink":"https://goopher.tk/posts/16539.html","excerpt":"","text":"前言新的教程已经发布,请参看 https://goopher.tk/posts/1.html参考了黑石的教程 https://www.heson10.com/posts/19736.html模板参考了 https://www.jq22.com/jquery-info23463目前已知的问题：不支持Pjax。 效果展示 步骤修改_config.volantis.yml主题配置文件pjax: enable: false 关闭pjax后，再找到Plugins。再Plugins下新增： plugins: ########### 图片轮播DIY ############## slider: enable: true img_1: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022629@2x.png link_1: https://goopher.tk/21510.html img_2: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022959@2x.png link_2: https://goopher.tk/50300.html img_3: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-023228@2x.png link_3: https://goopher.tk/24004.html img_4: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/%E5%9B%BE%E6%80%AA%E5%85%BD_c3e24bc3d29796c0593475a22f3a11e0_24823.png link_4: https://goopher.tk/61617.html img_5: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/shiyongvolantisgengyouya.png link_5: https://goopher.tk/29954.html ########### 热门帖子 ############## hot_post: ###### 热门1 ##### pic_one: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/QQ20210312-022351@2x.png post_one: https://goopher.tk/64658.html ###### 热门2 ##### pic_two: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/%E5%9B%BE%E6%80%AA%E5%85%BD_bb872333f9b8822a09d329308f839556_24325.png post_two: https://goopher.tk/52146.html 为图片轮播新建styl样式在/themes/volantis/source/css/_colsrch/下新建slider.styl这个文件，没有_colsrch文件夹的话自己新建一个。再往slider.styl里粘贴以下内容： .hide&#123; display: none; &#125; .slider display flex align-items center #slider&#123; @media screen and (max-width: 800px)&#123; display: none &#125; border-radius:10px position: relative; overflow: hidden; max-height:400px margin-top:auto; &#125; .slider-ul&#123; position: absolute; width: 999999999px; height: 100%; &#125; .slider-ul-li&#123; width: 520px; height: 100%; display: inline-block; &#125; .slider-ul-li-a, .slider-ul-li-a-img&#123; width: 100%; height: 100%; &#125; .slider-circlex&#123; position: absolute; bottom: 20px; right: 0; left: 0; text-align: center; &#125; .slider-circlex-ul&#123; display: inline-block; border-radius: 8px; background-color: red; background: rgba(0, 0, 0, 0.3); padding: 2px; font-size: 0; &#125; .slider-circlex-ul-li&#123; display: inline-block; width: 7px; height: 7px; background-color: #FFF; border-radius: 50%; margin: 0 4px; cursor: pointer; &#125; .slider-circlex-ul-li.active&#123; background-color: red; &#125; .slider-btn&#123; position: absolute; top: 50%; right: 0; left: 0; margin-top: -15px; &#125; .slider-btn a&#123; position: absolute; width: 30px; height: 30px; text-align: center; cursor: pointer; background-color: rgba(0, 0, 0, .5); &#125; .slider-btn-next&#123; right: -5px; border-radius: 50% 0 0 50%; &#125; .slider-btn-prev&#123; left: -5px; border-radius: 0 50% 50% 0; &#125; .slider-btn-prev-span, .slider-btn-next-span&#123; display: inline-block; width: 10px; height: 20px; margin-top: 4px; position: relative; &#125; .slider-btn-prev-span::after, .slider-btn-next-span::after&#123; content: &#39;&#39;; position: absolute; top: 50%; left: 50%; width: 7px; height: 7px; margin-top: -3.5px; &#125; .slider-btn-prev-span::after&#123; border-left: 2px solid #FFF; border-top: 2px solid #FFF; transform: rotate(-45deg); margin-left: -2px; &#125; .slider-btn-next-span::after&#123; border-right: 2px solid #FFF; border-bottom: 2px solid #FFF; transform: rotate(-45deg); margin-left: -7px; &#125; .l_main .post-list &#123; margin-top: 10px @media screen and (max-width: 800px) &#123; margin-top: 0px &#125; &#125; .hot_post display flex flex 1 flex-direction column margin-left 10px @media screen and (max-width: 800px) display none .index-banner flex 1 font-size 0 &amp;.forpadding margin-top 10px .hot_post img display inline-block width 100% border-radius 10px height 145px 之后修改/themes/volantis/source/css/style.styl文件，引入我们刚才新建的样式。再里面添加以下内容： if hexo-config(&#39;plugins.slider.enable&#39;) @import &#39;_colsrch/slider.styl&#39; 意为在_config.volantis.yml中 slider: enable: true 时，启用刚才新建的样式。 新建ejs在/themes/volantis/layout/_widget/目录下新建slider.ejs文件，再粘贴以下内容进去。 &lt;!--图片轮播--&gt; &lt;div class=&quot;slider&quot;&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/Goopher97/mycdn@1.1/jquery-1.10.2.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/Goopher97/mycdn@1.1/jquery.slider.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;slider&quot; style=&quot;width: 520px; height: 300px;&quot;&gt;&lt;/div&gt; &lt;script&gt; $(&quot;#slider&quot;).sliderImg(&#123; imgs: [&quot;&lt;%- theme.plugins.slider.img_1 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_2 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_3 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_4 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.img_5 %&gt;&quot;], link: [&quot;&lt;%- theme.plugins.slider.link_1 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_2 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_3 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_4 %&gt;&quot;, &quot;&lt;%- theme.plugins.slider.link_5 %&gt;&quot;], &#125;); &lt;/script&gt; &lt;div class=&quot;hot_post&quot;&gt; &lt;!--热门文章&amp;图片--&gt; &lt;div class=&quot;index-banner&quot;&gt; &lt;a href=&quot;&lt;%- theme.plugins.hot_post.post_one %&gt;&quot; target=&quot;_self&quot;&gt; &lt;img src=&quot;&lt;%- theme.plugins.hot_post.pic_one %&gt;&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;index-banner forpadding&quot;&gt; &lt;a href=&quot;&lt;%- theme.plugins.hot_post.post_two %&gt;&quot; target=&quot;_self&quot;&gt; &lt;img src=&quot;&lt;%- theme.plugins.hot_post.pic_two %&gt;&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 之后修改/themes/volantis/layout/index.ejs文件，在 &lt;div class=&#39;l_main&lt;%- page.sidebar == false ? &#39; no_sidebar&#39; : &#39;&#39; %&gt;&#39;&gt; 这一行的下面添加 &lt;% if (theme.plugins.slider.enable == true) &#123; %&gt; &lt;%- partial(&#39;_widget/slider&#39;) %&gt; &lt;% &#125; %&gt; 之后保存，再hexo clean &amp;&amp; hexo g &amp;&amp; hexo s就可以看到效果了。 最后如果有大佬修复了问题，记得跟我说一下，我搞不定了emmm","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"OC设置白果开机duang～","slug":"OC设置白果开机声音","date":"2021-03-10T04:41:31.000Z","updated":"2021-05-09T13:11:37.557Z","comments":true,"path":"posts/61617.html","link":"","permalink":"https://goopher.tk/posts/61617.html","excerpt":"","text":"步骤下载与替换与上一篇为OC启用图形化一致， 点击跳转注意看一下Resources/Audio/目录下是否有声音文件。 修改配置打开Hackintool工具，点击PCIe，找到声卡。声卡一般子类型为Audio device，右键，copy device path 使用OCC打开config，找到UEFI-UEFI设置—&gt;开机声音，AudioDevice这里粘贴进去： PlayChime设置为Auto自动，OC则会从NVRAM读取是否播放开机声音，即可以通过系统内的系统偏好设置-声音-启动时播放声音这个选择来控制，更贴近白果。设置为Enable启用，则每次开机都会播放声音，不受系统偏好设置的控制。勾选AudioSupport，MinimumVolume是声音的大小，可填0-100，VolumeAmplifier是系统音量到原始音量的线性换算的乘法系数，可填0-1000，SetupDelay为音频编解码器重新配置的延迟，单位为微秒。这里比较需要注意的是AudioCodec和AudioOut，AudioCodec这两个，我的之前看过知道是一个0一个1了。 OCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(&lt;redacted&gt;,00000000) (1 outputs) 如果不是这样的还需要自己查看： AudioOut的话可以暴力一点从0开始试一试。也可以去找调试日志。即： 最后不要忘了启用音频驱动，找到AudioDxe.efi，拖动到UEFI驱动里。 最后Misc里面的PickerAudioAssist语言辅助，这个还是不要启用了，每次都朗读启动项名称很烦。还有ResetTrafficClass这个是legacy HDA上将TCSEL重置为T0，一般用不上，不管。启用开机声音之后，每次开机加载都会被这个拖慢，所以要不要这个还是看自己选择。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC配置教程","slug":"OC配置教程","permalink":"https://goopher.tk/tags/OC%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"}],"author":"GOOPHER"},{"title":"OC屏蔽多余启动项","slug":"OC屏蔽多余启动项","date":"2021-03-10T02:41:31.000Z","updated":"2021-05-09T13:11:37.556Z","comments":true,"path":"posts/10085.html","link":"","permalink":"https://goopher.tk/posts/10085.html","excerpt":"","text":"效果屏蔽前：屏蔽后： 步骤打开OCC挂载EFI，打开config。点击Misc-其它设置—&gt;Boot里勾选隐藏辅助条目即可。隐藏Tools附加工具，只需要勾选辅助即可。还有一些启动项可能设置完这些还屏蔽不了，则可以点击Security设置scan policy。设置为0为自动，或者仅勾选需要扫描的启动项即可。 其他隐藏后的启动项可以在OC界面按空格显示，但是scan policy屏蔽掉的按空格也是不会显示的。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC配置教程","slug":"OC配置教程","permalink":"https://goopher.tk/tags/OC%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"}],"author":"GOOPHER"},{"title":"为OC启用图形化/修改主题","slug":"为OC启用图形化or修改主题","date":"2021-03-10T02:41:31.000Z","updated":"2021-05-09T13:11:37.575Z","comments":true,"path":"posts/51040.html","link":"","permalink":"https://goopher.tk/posts/51040.html","excerpt":"","text":"前言其实这个早在之前的配置过程中就写过了，但是还是有好多人爱问，所以单独拿出来写一下。 步骤下载主题这里仅提供一个官方的主题，需要其他主题的可以自己去下载，但是在使用的时候请注意有些主题需要一个额外的设置，麻烦自行查看主题的说明修改。点击前往 打开后点击Code—&gt;Download zip下载。 下载完成后将其解压。可能有的朋友下载会很慢，这里提供一个加速的下载链接， 点击前往 挂载EFI修改打开OCC编辑器，点击顶栏的工具—-&gt;挂载EFI，然后打开打开分区。然后先将原本EFI/OC/目录下的Resources文件夹删除，再把刚才下载好的打开，找到Resources文件夹，把它拖进去EFI/OC/目录下。 使用OCC打开config配置文件修改点击UEFI-UEFI设置—&gt;UEFI驱动，然后打开EFI/OC/Drivers/，找到OpenCanopy.efi文件，将其拖动到OCC里面添加。之后点击Misc-其它设置，修改启动界面模式为External，其他默认即可。 注意这里的PickerVariant一般情况下我们使用Auto自动就可以了，可能有些主题需要改动，其相关释义如下：","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC配置教程","slug":"OC配置教程","permalink":"https://goopher.tk/tags/OC%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"}],"author":"GOOPHER"},{"title":"使用volantis更优雅地展示截图/录屏","slug":"使用volantis更优雅得展示截图or录屏","date":"2021-03-07T04:41:31.000Z","updated":"2021-05-09T13:11:37.604Z","comments":true,"path":"posts/24004.html","link":"","permalink":"https://goopher.tk/posts/24004.html","excerpt":"","text":"初衷我的博客上面大多数时候都是写的一些搞机类文章，所以自然少不了许多的截图展示，以后也想要加入一些相关的视频教学。 但是如果咱直接使用md的插入图片的方法，看多了之后我就觉得缺少点什么，感觉缺少一丢丢B格。之后我在翻阅主题文档的时候，偶然间看见了类似带壳截图这样的展示，豁然开朗，决定立马搞起。相关文档 第21条frame。可惜的是volantis仅给我们提供了一个iPhone11的框架图，要使用其他设备的我们还需要自己引入调整。 操作步骤1.下载需要的框架图2.引入我们自己的框架图3.往需要的地方插入标签4.修改css调整框架图和截图的位置使之匹配 下载框架图虽然文档中说需要svg格式的，但是实际测试下来，png格式的也是可以使用的。所以在我找了好多网站之后，找到了一个有提供各种设备框架图的，重点还是免费的。 点击前往在这个网站上不仅仅有苹果iPhone Mac 之类的，安卓手机，平板，dell电脑等等都有。下载好我们需要的框架图，将其上传至图床中，以方便后续引用。 修改css打开themes/volantis/source/css/_tag-plugins/目录下的frame.styl文件。我们可以看到默认为我们提供的iPhone11相关的样式代码，接下来我们对其仿写，引入我们需要的框架图。示例：在第45行（iPhone11之后）插入一下仿写的代码 ： &amp;#iphone8SG // iphone8深空灰,这里是对引入的frame命名，一定要改 img,video // 这里是对插入的图片或者视频的大小调整 width: 188px margin-top: 70px margin-bottom: 70px .frame background-image: url(https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/Apple%20iPhone%208%20Space%20Grey.png); //这里是我们自己引入的框架图，从图床复制链接过来即可。 width: 237.5px // 这里是对我们自己引入的框架的大小进行调整 height: 473.5px &amp;[part=&#39;top&#39;] // 这里是用作仅显示上半部分，我们不改 img,video margin-bottom: 0 !important &amp;:not([part=&#39;bottom&#39;]) .frame top: 0 &amp;[part=&#39;bottom&#39;] // 这里是用作显示下半部分，也不改 img,video bottom: 0 margin-top: 0 !important .frame bottom: 0 之后我们还需要找到 @media screen and (max-width: $device-mobile) // 这里标示下面的是为移动端的样式 在iPhone11相关的结束之后加上我们自己仿写的。示例：在第77行加入我仿写的: &amp;#iphone8SG // iphone8深空灰 img,video // 移动端 图片或者视频的大小 width: 188px margin-top: 70px margin-bottom: 70px .frame // 移动端 框架图的大小 width: 237.5px height: 473.5px 之后我们就可以在需要的文章插入标签引用了。 在文章中引用打开需要引用的文章的md文件，在需要的地方插入: &#123;% frame iphone8SG | img=https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/1E0B6D95-B12F-4B7C-8285-D8415F982909_L0_001_origin.IMG_0456.PNG %&#125; 解释：这里的iphone8SG就是我们上面css里的名称，后面的img=就是我们要插入的图片或者用video=插入视频。如果只需要上半部分或者下班部分就按照官方的再往后面加part=top/bottom（可选）也可以加上描述之类的alt=描述。这里值得注意的一个地方就是在插入上半部分或者下半部分的图片的时候，我们需要先对图片裁切，仅保留我们需要的上班部分或者下半部分再引用，否则会因图片大，超限不显示而报错。 生成并在本地预览调整位置做完上面的，我们就可以hexo g &amp;&amp; hexo s在本地预览了。在预览的时候推荐使用谷歌浏览器，并且按F12打开开发者模式。找到我们插入的文章进入，我们会看到框架图和图片是错位的情况，需要我们对其手动调整。点一下这里标示的图标，再点击一下错位的地方，就可以快速定位我们需要改的参数了。改完之后我们就可以立马看见效果。没有问题，我们就把这个参数改进到上面说的frame.styl文件里。然后再返回Chrome浏览器多刷新两次看看改动是否成功。同理调整移动端，我们只需要用Chrome浏览器的这个功能：调整完成改进frame.styl文件里即可。 完成后的效果展示 发散性思维在使用电脑的例如iMac的框架图时，显然手机的上半部分和下半部分的展示就感觉补胎合理，so我们可以仿写，将其改为左右两个半边的展示。使用margin-left、margin-right都行，就留给大家自己弄了。","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"}],"author":"GOOPHER"},{"title":"Volantis实现自动夜间和日间模式切换","slug":"volationsdarkmodeauto","date":"2021-02-28T04:30:30.000Z","updated":"2021-05-09T13:11:37.569Z","comments":true,"path":"posts/16065.html","link":"","permalink":"https://goopher.tk/posts/16065.html","excerpt":"","text":"大佬弄好了一个我问什么要改 大佬弄的 这个实现了在没有暗黑模式的系统里的切换，如果像iOS或者macOS或者新的win10和安卓都实现了系统级别的暗黑模式。如果还按照大佬的弄，就会造成在启用暗黑模式的系统中切换夜间/日间模式切反的情况，所以我才对其进行了修改。 如何使用使用方法与大佬的一致，目前适用于Volantis4及以下。1.在_config.volantis.yml中启用暗黑模式并添加切换按钮。2.添加弹窗和样式，按照大佬的 操作即可。3.修改 layout/_partial/scripts/darkmode.ejs 文件在文件开头添加如下： &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/gh/Colsrch/CDN@master/judge_time/js.js&quot;&gt;&lt;/script&gt; 将下列代码复制添加至该文件的末尾（script）标签前面： // 自动夜间模式 if (navigator.geolocation) &#123; //获取地理位置 用于判断日出日落时间 navigator.geolocation.getCurrentPosition( function (position) &#123; var res = computeSunRiseSunSet(position.coords.latitude, position.coords.longitude, 8); console.log(res.str) adjust_time(res.strSunRise, res.strSunSet, &quot;08:00&quot;, &quot;12:00&quot;, &quot;14:00&quot;, &quot;23:00&quot;) &#125;, function (e) &#123; adjust_time(&quot;7:00&quot;, &quot;17:30&quot;, &quot;08:00&quot;, &quot;12:00&quot;, &quot;14:00&quot;, &quot;23:00&quot;) //未允许获取地理位置时，使用默认时间 console.log(&quot;未允许获取地理位置，使用默认配置时间&quot;) throw (e.message); &#125; ) &#125; function adjust_time(beginTime, endTime, morningTime, noonTime, afternoonTime, nightTime) &#123; const rootElement = document.documentElement; var strb = beginTime.split(&quot;:&quot;); if (strb.length != 2) &#123; return false; &#125; var stre = endTime.split(&quot;:&quot;); if (stre.length != 2) &#123; return false; &#125; var strmorning = morningTime.split(&quot;:&quot;); //12点 if (stre.length != 2) &#123; return false; &#125; var strnoon = noonTime.split(&quot;:&quot;); //12点 if (stre.length != 2) &#123; return false; &#125; var strafternoon = afternoonTime.split(&quot;:&quot;); //13点 if (stre.length != 2) &#123; return false; &#125; var strnight = nightTime.split(&quot;:&quot;); //23点 if (stre.length != 2) &#123; return false; &#125; var b = new Date(); var e = new Date(); var n = new Date(); var morning = new Date(); var noon = new Date(); var afternoon = new Date(); var night = new Date(); b.setHours(strb[0]); b.setMinutes(strb[1]); e.setHours(stre[0]); e.setMinutes(stre[1]); morning.setHours(strmorning[0]); morning.setMinutes(strmorning[1]); noon.setHours(strnoon[0]); noon.setMinutes(strnoon[1]); afternoon.setHours(strafternoon[0]); afternoon.setMinutes(strafternoon[1]); night.setHours(strnight[0]); night.setMinutes(strnight[1]); $.getJSON(&quot;https://v1.hitokoto.cn&quot;, function (hitokoto) &#123; //在这里面处理获得的数据 if (n.getTime() - b.getTime() &gt; 0 &amp;&amp; n.getTime() - e.getTime() &lt; 0) &#123; var daytimetitle = &#39;&#39; var daytimemessage = &#39;&#39; if (n.getTime() - morning.getTime() &lt; 0) &#123; // 早上 daytimetitle = &#39;早安&#39; &#125; else if (n.getTime() - noon.getTime() &lt; 0) &#123; // 上午 daytimetitle = &#39;上午好&#39; &#125; else if (n.getTime() - afternoon.getTime() &lt; 0) &#123; // 中午 daytimetitle = &#39;中午好&#39; daytimemessage = &#39;&lt;br&gt;要注意休息哦~&#39; &#125; else &#123; // 下午 daytimetitle = &#39;下午好&#39; &#125; // 判断是否已经开启夜间模式 if (rootElement.getAttribute(&#39;data-user-color-scheme&#39;, &#39;dark&#39;)) &#123; // 已开启夜间模式，修改按钮状态 $.message(&#123; title: &#39;操作通知&#39;, message: daytimetitle + &#39;，已自动为您切换为日间模式。&lt;br&gt;&#39; + hitokoto.hitokoto + daytimemessage, type: &#39;success&#39; &#125;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; if (rootElement.getAttribute(&#39;data-user-color-scheme&#39;, &#39;light&#39;)) &#123; // 未开启夜间模式，不执行操作 $.message(&#123; title: daytimetitle, message: hitokoto.hitokoto + daytimemessage, type: &#39;info&#39; &#125;); return true; &#125; else if (window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches) &#123; // 已开启夜间模式，修改按钮状态 $.message(&#123; title: &#39;操作通知&#39;, message: daytimetitle + &#39;，已自动为您切换为日间模式。&lt;br&gt;&#39; + hitokoto.hitokoto + daytimemessage, type: &#39;success&#39; &#125;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; else &#123; // 未开启夜间模式，不执行操作 $.message(&#123; title: daytimetitle, message: hitokoto.hitokoto + daytimemessage, type: &#39;info&#39; &#125;); return true; &#125; &#125; else &#123; // 晚上 var nighttitle = &#39;&#39; var nightmessage = &#39;&#39; if (night.getTime() - n.getTime() &lt; 0 || n.getTime() - b.getTime() &lt; 0) &#123; nighttitle = &#39;夜深了&#39; nightmessage = &#39;&lt;br&gt;该睡觉啦~&#39; &#125; else &#123; nighttitle = &#39;晚上好&#39; nightmessage = &#39;&lt;br&gt;吃晚饭了吗？要注意眼睛哦。&#39; &#125; // 判断是否已经开启夜间模式 if (rootElement.getAttribute(&#39;data-user-color-scheme&#39;, &#39;light&#39;)) &#123; // 未开启夜间模式，修改按钮状态 $.message(&#123; title: &#39;操作通知&#39;, message: nighttitle + &#39;，已自动为您切换为夜间模式。&lt;br&gt;&#39; + hitokoto.hitokoto + nightmessage, type: &#39;success&#39; &#125;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; if (rootElement.getAttribute(&#39;data-user-color-scheme&#39;, &#39;dark&#39;)) &#123; // 已开启夜间模式，不执行操作 $.message(&#123; title: nighttitle, message: hitokoto.hitokoto + nightmessage, type: &#39;info&#39; &#125;); return true; &#125; else if (window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches) &#123; // 已开启夜间模式，不执行操作 $.message(&#123; title: nighttitle, message: hitokoto.hitokoto + nightmessage, type: &#39;info&#39; &#125;); return true; &#125; else &#123; // 未开启夜间模式，修改按钮状态 $.message(&#123; title: &#39;操作通知&#39;, message: nighttitle + &#39;，已自动为您切换为夜间模式。&lt;br&gt;&#39; + hitokoto.hitokoto + nightmessage, type: &#39;success&#39; &#125;); const mode = toggleCustomDarkMode(); applyCustomDarkModeSettings(mode); &#125; &#125; &#125;); &#125; 说明原本的暗黑模式标示为”data-user-color-scheme=dark”如果启用了系统级别的暗黑模式则标示为”(prefers-color-scheme: dark)”因为多出了一个标示，固会导致原来大佬的在系统级暗黑下变反。这里增加了对prefers-color-scheme: dark的监听，新增了对系统级暗黑的判断，使得在系统级暗黑下不会出现弄反的情况。监听prefers-color-scheme: dark if (window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches) &#123; &#125; else &#123; &#125; 在系统级暗黑的情况下，日间模式标示变为”data-user-color-scheme=light” 最后修复了时间在夜晚的时候，系统级暗黑的情况下自动切换切反的问题。修复了时间在夜晚的时候，系统未开启暗黑的情况下，自动切换两个模式轮切的问题。修复了时间在白天的时候，系统级暗黑的情况下自动切换切反的问题。修复了时间在白天的时候，系统未开启暗黑的情况下，自动切换两个模式轮切的问题。","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"},{"name":"darkmode","slug":"darkmode","permalink":"https://goopher.tk/tags/darkmode/"}],"author":"GOOPHER"},{"title":"OpenCore更新0.6.7","slug":"OpenCore更新0.6.7","date":"2021-02-27T14:50:00.000Z","updated":"2021-05-09T13:11:37.557Z","comments":true,"path":"posts/31033.html","link":"","permalink":"https://goopher.tk/posts/31033.html","excerpt":"","text":"更新步骤与上一次更新步骤一致，此处就不过多赘述。如果不懂，请参看上一篇更新文章: 升级 OC066 相关下载OpenCore0.6.7：点击下载 AppleAlc1.5.8：点击下载 开始更新挂载 EFI首先随便打开一个能挂载 EFI 分区的工具挂载 EFI 分区，像 OCC 之类的都可以。 备份 EFI挂载之后先打开分区，备份原来的 EFI 至 U 盘或是别的地方，以便更新失败后恢复使用。 解压复制替换和修改 config过程不再赘述。修改 config，对照 Sample 示例文件修改。此次升级变动如下：UEFI-Audio 下新增 ResetTrafficClassUEFI-Input 下移除 KeyMergeThresholdUEFI-Output 下新增 GopPassThroughUEFI-Quirks 下新增 ActivateHpetSupport 查看更新是否成功备注：有时候这个版本号没更新的话需要重置一下 NVRAM。 相关阅读OC 中文手册 备注：文档也会更新不及时，在你不了解更新确切意义时建议暂不更新，或做好备份，做好准备再更新。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OpenCore更新","slug":"OpenCore更新","permalink":"https://goopher.tk/tags/OpenCore%E6%9B%B4%E6%96%B0/"},{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"author":"GOOPHER"},{"title":"黑苹果基础之efi工具","slug":"黑苹果基础之efi工具","date":"2021-02-27T14:50:00.000Z","updated":"2021-05-09T13:11:37.605Z","comments":true,"path":"posts/31708.html","link":"","permalink":"https://goopher.tk/posts/31708.html","excerpt":"","text":"什么是 efi 工具即 EFI/OC/Tools 目录下的 efi 文件。 各个 efi 工具的作用BootKicker.efi：进入 Apple 的 BootPicker 菜单（仅 Mac 同款显卡才可以使用）。ChipTune.efi：测试 BeepGen 协议，生成不同频率和长度的音频信号。CleanNvram.efi：清空 NVRAM。常用GopStop.efi：用一个简单的场景测试 GraphicOutput 协议。KeyTester.efi：在 SimpleText 模式下测试键盘输入。MmapDump.efi：丢弃内存映射对象。OpenControl.efi：开启主控台。OpenShell.efi：UEFI shellResetSystem.efi：系统重置。RtcRw.efi：RTC（CMOS）读写。VerifyMsrE2.efi：检查 CFG Lock。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"efi工具","slug":"efi工具","permalink":"https://goopher.tk/tags/efi%E5%B7%A5%E5%85%B7/"}],"author":"GOOPHER"},{"title":"黑苹果基础之efi驱动","slug":"黑苹果基础之efi驱动","date":"2021-02-27T14:50:00.000Z","updated":"2021-05-09T13:11:37.606Z","comments":true,"path":"posts/32053.html","link":"","permalink":"https://goopher.tk/posts/32053.html","excerpt":"","text":"什么是 efi 驱动即在 EFI/OC/Drivers 下的 efi 文件，在选用必要的 efi 驱动前需要先了解每个 efi 驱动的作用。一般来说会用到的也就其中几个。 各个 efi 驱动的作用AudioDxe.efi：UEFI 固件中的 HDA 音频驱动程序。即在 OC 界面时加载的音频驱动，用于开机时的 duang~声和朗读当前选择的启动项名称。实用意义不大，不推荐使用，启用后电脑开机速度会变慢 3 秒左右。CrScreenshotDxe.efi：截图驱动。启用后，按下 F10 将能够截图并保存在 EFI 分区根目录下。HiiDatabase.efi：UEFI 字体渲染驱动，适用于 3 代酷睿和之前更老的设备。在 UEFI Shell 中文字体渲染出错时启用，之后的电脑都不需要。NvmExpressDxe.efi：NVMe 驱动程序。用于 4 代酷睿或更老的设备上，在安装了 nvme 协议的硬盘后 OC 读不到该硬盘启用。若在新平台上将 NVMe 转接至 PCIe，或许也需要该驱动。OpenCanopy.efi：OC 的图像驱动。要启用 OC 的主题，就需要该驱动。OpenHfsPlus.efi：HFS 文件系统驱动。推荐使用 HFSPlus.efi 若制作好启动盘，替换引导后读不到 macOS 的启动项，或许是该驱动没有启用。同时在 bigsur 之前的系统，recovery 分区也是需要该驱动，bigsur 的 recovery 现在是 apfs 的。OpenPartitionDxe.efi：分区管理驱动程序。用于加载旧版 macOS 的 DMG 映像（如 macOS 10.9 的分区映像）。对于 2 代酷睿或者更早的 CPU，由于缺少 RDRAND 指令支持，应使用 PartitionDxeLegacy 驱动程序。OpenRuntime.efi：原名 FwRuntimeServices.efi，用于实现 OC_FIRMWARE_RUNTIME 协议，通过支持只读、只写 NVRAM 变量，提升了 OpenCore 和 Lilu 的安全性。有些 Quirk 如 RequestBootVarRouting 依赖此驱动程序。由于 Runtime 驱动的性质（与目标操作系统并行运行），因此它不能在 OpenCore 本身实现，而是与 OpenCore 捆绑在一起。必须启用。OpenUsbKbDxe.efi：USB 键盘驱动，在自定义 USB 键盘驱动程序的基础上新增了对 AppleKeyMapAggregator 协议的支持。这是内置的 KeySupport 的等效替代方案。根据固件不同，效果可能会更好或者更糟。启用苹果热键后需要该驱动，可能有些设备不用，未测试过。UsbMouseDxe.efi：USB 鼠标驱动。一般只有虚拟机（如 OVMF）的固件中可能不包含该驱动，这些虚拟机需要依赖该驱动才能在引导界面使用鼠标。Ps2KeyboardDxe.efi： PS/2 键盘驱动。OpenDuetPkg 和一些固件可能不包括这个驱动，但对于 PS/2 键盘来说该驱动是必须的。注意，和 OpenUsbKbDxe 不同，该驱动不提供对 AppleKeyMapAggregator 的支持、因此需要启用 KeySupport 这个 Quirk。Ps2MouseDxe.efi：PS/2 鼠标驱动。一些非常老旧的笔记本的固件中可能不包含该驱动，但是这些笔记本需要依赖该驱动才能在引导界面使用触控板。XhciDxe.efi：XHCI USB controller 驱动程序。从 2 代酷睿开始的大多数固件中都包含此驱动程序。在较早的固件或旧系统可以用于支持外部 USB 3.0 PCI 卡。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"efi驱动","slug":"efi驱动","permalink":"https://goopher.tk/tags/efi%E9%A9%B1%E5%8A%A8/"}],"author":"GOOPHER"},{"title":"使用Scriptable创建小组件","slug":"Scriptable","date":"2021-02-24T16:30:31.000Z","updated":"2021-05-09T13:11:37.558Z","comments":true,"path":"posts/29954.html","link":"","permalink":"https://goopher.tk/posts/29954.html","excerpt":"","text":"安装打开app store搜索Scriptable下载安装即可，是免费的。 寻找需要的小组件代码一般去github搜就有了，这里先以一个知乎热榜小组件为例。我们先阅读说明。可以看到，需要先安装Env。点击他给的跳转。然后全选复制代码。打开Scriptable软件，点击右上角的➕号，然后将代码粘贴进去。粘贴后点击左下角的设置按钮，重命名为Env。之后依次点击左上角的close done保存退出。再打开之前的说明，找到要安装的小组件”知乎热榜”。全选复制代码。之后再打开Scriptable，点击➕新建，将代码粘贴进去，再点击左下角设置，重命名为”知乎热榜”。完成后就可以点击右下角的运行按钮预览一下效果。新建小组件在新建的时候选择Scriptable这个软件，然后选择合适的大小。然后再点击一下反转，选择知乎热搜，然后就好了。 电信小组件同理，我们可以添加更实用的电信流量话费组件。 安装依赖复制以下代码去新建名为DmYY的依赖。 /* * Author: 2Ya * Github: https://github.com/dompling */ class DmYY &#123; constructor(arg) &#123; this.arg = arg; this._actions = &#123;&#125;; this.init(); this.isNight = Device.isUsingDarkAppearance(); &#125; BACKGROUND_NIGHT_KEY; widgetColor; backGroundColor; useBoxJS = true; isNight; // 获取 Request 对象 getRequest = (url = &#39;&#39;) =&gt; &#123; return new Request(url); &#125;; // 发起请求 http = async (options = &#123; headers: &#123;&#125;, url: &#39;&#39; &#125;, type = &#39;JSON&#39;) =&gt; &#123; try &#123; let request; if (type !== &#39;IMG&#39;) &#123; request = this.getRequest(); Object.keys(options).forEach((key) =&gt; &#123; request[key] = options[key]; &#125;); request.headers = &#123; ...this.defaultHeaders, ...options.headers &#125;; &#125; else &#123; request = this.getRequest(options.url); return (await request.loadImage()) || SFSymbol.named(&#39;photo&#39;).image; &#125; if (type === &#39;JSON&#39;) &#123; return await request.loadJSON(); &#125; if (type === &#39;STRING&#39;) &#123; return await request.loadString(); &#125; return await request.loadJSON(); &#125; catch (e) &#123; console.log(&#39;error:&#39; + e); if (type === &#39;IMG&#39;) return SFSymbol.named(&#39;photo&#39;).image; &#125; &#125;; //request 接口请求 $request = &#123; get: async (url = &#39;&#39;, options = &#123;&#125;, type = &#39;JSON&#39;) =&gt; &#123; let params = &#123; ...options, method: &#39;GET&#39; &#125;; if (typeof url === &#39;object&#39;) &#123; params = &#123; ...params, ...url &#125;; &#125; else &#123; params.url = url; &#125; let _type = type; if (typeof options === &#39;string&#39;) _type = options; return await this.http(params, _type); &#125;, post: async (url = &#39;&#39;, options = &#123;&#125;, type = &#39;JSON&#39;) =&gt; &#123; let params = &#123; ...options, method: &#39;POST&#39; &#125;; if (typeof url === &#39;object&#39;) &#123; params = &#123; ...params, ...url &#125;; &#125; else &#123; params.url = url; &#125; let _type = type; if (typeof options === &#39;string&#39;) _type = options; return await this.http(params, _type); &#125;, &#125;; // 获取 boxJS 缓存 getCache = async (key) =&gt; &#123; try &#123; const url = &#39;http://&#39; + this.prefix + &#39;/query/boxdata&#39;; const boxdata = await this.$request.get(url); console.log(boxdata.datas[key]); if (key) return boxdata.datas[key]; return boxdata.datas; &#125; catch (e) &#123; console.log(e); return false; &#125; &#125;; transforJSON = (str) =&gt; &#123; if (typeof str == &#39;string&#39;) &#123; try &#123; return JSON.parse(str); &#125; catch (e) &#123; console.log(e); return str; &#125; &#125; console.log(&#39;It is not a string!&#39;); &#125;; // 选择图片并缓存 chooseImg = async () =&gt; &#123; return await Photos.fromLibrary(); &#125;; // 设置 widget 背景图片 getWidgetBackgroundImage = async (widget) =&gt; &#123; const backgroundImage = this.getBackgroundImage(); if (backgroundImage) &#123; const opacity = Device.isUsingDarkAppearance() ? Number(this.settings.darkOpacity) : Number(this.settings.lightOpacity); widget.backgroundImage = await this.shadowImage( backgroundImage, &#39;#000&#39;, opacity, ); return true; &#125; else &#123; if (this.backGroundColor.colors) &#123; widget.backgroundGradient = this.backGroundColor; &#125; else &#123; widget.backgroundColor = this.backGroundColor; &#125; return false; &#125; &#125;; /** * 验证图片尺寸： 图片像素超过 1000 左右的时候会导致背景无法加载 * @param img Image */ verifyImage = async (img) =&gt; &#123; try &#123; const &#123; width, height &#125; = img.size; const direct = true; if (width &gt; 1000) &#123; const options = [&#39;取消&#39;, &#39;打开图像处理&#39;]; const message = &#39;您的图片像素为&#39; + width + &#39; x &#39; + height + &#39;\\n&#39; + &#39;请将图片&#39; + (direct ? &#39;宽度&#39; : &#39;高度&#39;) + &#39;调整到 1000 以下\\n&#39; + (!direct ? &#39;宽度&#39; : &#39;高度&#39;) + &#39;自动适应&#39;; const index = await this.generateAlert(message, options); if (index === 1) Safari.openInApp(&#39;https://www.sojson.com/image/change.html&#39;, false); return false; &#125; return true; &#125; catch (e) &#123; return false; &#125; &#125;; /** * 获取截图中的组件剪裁图 * 可用作透明背景 * 返回图片image对象 * 代码改自：https://gist.github.com/mzeryck/3a97ccd1e059b3afa3c6666d27a496c9 * @param &#123;string&#125; title 开始处理前提示用户截图的信息，可选（适合用在组件自定义透明背景时提示） */ async getWidgetScreenShot(title = null) &#123; // Crop an image into the specified rect. function cropImage(img, rect) &#123; let draw = new DrawContext(); draw.size = new Size(rect.width, rect.height); draw.drawImageAtPoint(img, new Point(-rect.x, -rect.y)); return draw.getImage(); &#125; // Pixel sizes and positions for widgets on all supported phones. function phoneSizes() &#123; return &#123; // 12 and 12 Pro 2532: &#123; small: 474, medium: 1014, large: 1062, left: 78, right: 618, top: 231, middle: 819, bottom: 1407, &#125;, // 11 Pro Max, XS Max 2688: &#123; small: 507, medium: 1080, large: 1137, left: 81, right: 654, top: 228, middle: 858, bottom: 1488, &#125;, // 11, XR 1792: &#123; small: 338, medium: 720, large: 758, left: 54, right: 436, top: 160, middle: 580, bottom: 1000, &#125;, // 11 Pro, XS, X 2436: &#123; small: 465, medium: 987, large: 1035, left: 69, right: 591, top: 213, middle: 783, bottom: 1353, &#125;, // Plus phones 2208: &#123; small: 471, medium: 1044, large: 1071, left: 99, right: 672, top: 114, middle: 696, bottom: 1278, &#125;, // SE2 and 6/6S/7/8 1334: &#123; small: 296, medium: 642, large: 648, left: 54, right: 400, top: 60, middle: 412, bottom: 764, &#125;, // SE1 1136: &#123; small: 282, medium: 584, large: 622, left: 30, right: 332, top: 59, middle: 399, bottom: 399, &#125;, // 11 and XR in Display Zoom mode 1624: &#123; small: 310, medium: 658, large: 690, left: 46, right: 394, top: 142, middle: 522, bottom: 902, &#125;, // Plus in Display Zoom mode 2001: &#123; small: 444, medium: 963, large: 972, left: 81, right: 600, top: 90, middle: 618, bottom: 1146, &#125;, &#125;; &#125; let message = title || &#39;开始之前，请先前往桌面，截取空白界面的截图。然后回来继续&#39;; let exitOptions = [&#39;我已截图&#39;, &#39;前去截图 &gt;&#39;]; let shouldExit = await this.generateAlert(message, exitOptions); if (shouldExit) return; // Get screenshot and determine phone size. let img = await Photos.fromLibrary(); let height = img.size.height; let phone = phoneSizes()[height]; if (!phone) &#123; message = &#39;好像您选择的照片不是正确的截图，请先前往桌面&#39;; await this.generateAlert(message, [&#39;我已知晓&#39;]); return; &#125; // Prompt for widget size and position. message = &#39;截图中要设置透明背景组件的尺寸类型是？&#39;; let sizes = [&#39;小尺寸&#39;, &#39;中尺寸&#39;, &#39;大尺寸&#39;]; let size = await this.generateAlert(message, sizes); let widgetSize = sizes[size]; message = &#39;要设置透明背景的小组件在哪个位置？&#39;; message += height === 1136 ? &#39; （备注：当前设备只支持两行小组件，所以下边选项中的「中间」和「底部」的选项是一致的）&#39; : &#39;&#39;; // Determine image crop based on phone size. let crop = &#123; w: &#39;&#39;, h: &#39;&#39;, x: &#39;&#39;, y: &#39;&#39; &#125;; if (widgetSize === &#39;小尺寸&#39;) &#123; crop.w = phone.small; crop.h = phone.small; let positions = [ &#39;左上角&#39;, &#39;右上角&#39;, &#39;中间左&#39;, &#39;中间右&#39;, &#39;左下角&#39;, &#39;右下角&#39;, ]; let _posotions = [ &#39;Top left&#39;, &#39;Top right&#39;, &#39;Middle left&#39;, &#39;Middle right&#39;, &#39;Bottom left&#39;, &#39;Bottom right&#39;, ]; let position = await this.generateAlert(message, positions); // Convert the two words into two keys for the phone size dictionary. let keys = _posotions[position].toLowerCase().split(&#39; &#39;); crop.y = phone[keys[0]]; crop.x = phone[keys[1]]; &#125; else if (widgetSize === &#39;中尺寸&#39;) &#123; crop.w = phone.medium; crop.h = phone.small; // Medium and large widgets have a fixed x-value. crop.x = phone.left; let positions = [&#39;顶部&#39;, &#39;中间&#39;, &#39;底部&#39;]; let _positions = [&#39;Top&#39;, &#39;Middle&#39;, &#39;Bottom&#39;]; let position = await this.generateAlert(message, positions); let key = _positions[position].toLowerCase(); crop.y = phone[key]; &#125; else if (widgetSize === &#39;大尺寸&#39;) &#123; crop.w = phone.medium; crop.h = phone.large; crop.x = phone.left; let positions = [&#39;顶部&#39;, &#39;底部&#39;]; let position = await this.generateAlert(message, positions); // Large widgets at the bottom have the &quot;middle&quot; y-value. crop.y = position ? phone.middle : phone.top; &#125; // Crop image and finalize the widget. return cropImage(img, new Rect(crop.x, crop.y, crop.w, crop.h)); &#125; setLightAndDark = async (title, desc, light, dark) =&gt; &#123; try &#123; const a = new Alert(); a.title = &#39;白天和夜间&#39; + title; a.message = !desc ? &#39;请自行去网站上搜寻颜色（Hex 颜色）&#39; : desc; a.addTextField(&#39;白天&#39;, (this.settings[light] || &#39;&#39;) + &#39;&#39;); a.addTextField(&#39;夜间&#39;, (this.settings[dark] || &#39;&#39;) + &#39;&#39;); a.addAction(&#39;确定&#39;); a.addCancelAction(&#39;取消&#39;); const id = await a.presentAlert(); if (id === -1) return; this.settings[light] = a.textFieldValue(0); this.settings[dark] = a.textFieldValue(1); // 保存到本地 this.saveSettings(); &#125; catch (e) &#123; console.log(e); &#125; &#125;; /** * 弹出输入框 * @param title 标题 * @param desc 描述 * @param opt 属性 * @returns &#123;Promise&lt;void&gt;&#125; */ setAlertInput = async (title, desc, opt = &#123;&#125;, isSave = true) =&gt; &#123; const a = new Alert(); a.title = title; a.message = !desc ? &#39;&#39; : desc; Object.keys(opt).forEach((key) =&gt; &#123; a.addTextField(opt[key], this.settings[key]); &#125;); a.addAction(&#39;确定&#39;); a.addCancelAction(&#39;取消&#39;); const id = await a.presentAlert(); if (id === -1) return; const data = &#123;&#125;; Object.keys(opt).forEach((key, index) =&gt; &#123; data[key] = a.textFieldValue(index); &#125;); // 保存到本地 if (isSave) &#123; this.settings = &#123; ...this.settings, ...data &#125;; return this.saveSettings(); &#125; return data; &#125;; /** * 设置当前项目的 boxJS 缓存 * @param opt key value * @returns &#123;Promise&lt;void&gt;&#125; */ setCacheBoxJSData = async (opt = &#123;&#125;) =&gt; &#123; const options = [&#39;取消&#39;, &#39;确定&#39;]; const message = &#39;代理缓存仅支持 BoxJS 相关的代理！&#39;; const index = await this.generateAlert(message, options); if (index === 0) return; try &#123; const boxJSData = await this.getCache(); Object.keys(opt).forEach((key) =&gt; &#123; this.settings[key] = boxJSData[opt[key]] || &#39;&#39;; &#125;); // 保存到本地 this.saveSettings(); &#125; catch (e) &#123; console.log(e); this.notify( this.name, &#39;BoxJS 缓存读取失败！点击查看相关教程&#39;, &#39;https://chavyleung.gitbook.io/boxjs/awesome/videos&#39;, ); &#125; &#125;; /** * 设置组件内容 * @returns &#123;Promise&lt;void&gt;&#125; */ setWidgetConfig = async () =&gt; &#123; const alert = new Alert(); alert.title = &#39;内容配置&#39;; alert.message = &#39;主题设置、刷新时间等&#39;; alert.addAction(&#39;刷新时间&#39;); alert.addAction(&#39;主题设置&#39;); if (this.useBoxJS) alert.addAction(&#39;BoxJS域名&#39;); alert.addAction(&#39;重置所有&#39;); alert.addCancelAction(&#39;取消&#39;); const actions = [ async () =&gt; &#123; await this.setAlertInput( &#39;刷新时间（分）&#39;, &#39;默认刷新时间 30 分钟刷新一次，也可自行手动运行&#39;, &#123; refreshAfterDate: &#39;分钟&#39; &#125;, ); &#125;, async () =&gt; &#123; const a = new Alert(); a.title = &#39;主题设置&#39;; a.addAction(&#39;背景设置&#39;); a.addAction(&#39;背景颜色&#39;); a.addAction(&#39;字体颜色&#39;); a.addAction(&#39;透明背景&#39;); a.addAction(&#39;蒙层透明&#39;); a.addAction(&#39;清空背景&#39;); a.addCancelAction(&#39;取消&#39;); let i = await a.presentSheet(); if (i === -1) return; const _action = [ async () =&gt; &#123; const message = &#39;白天和夜间背景&#39;; const options = [&#39;白天&#39;, &#39;夜间&#39;, &#39;取消&#39;]; const index = await this.generateAlert(message, options); if (index === 2) return; const backImage = await this.chooseImg(); if (!backImage || !(await this.verifyImage(backImage))) return; if (index === 0) await this.setBackgroundImage(backImage, true); if (index === 1) await this.setBackgroundNightImage(backImage, true); &#125;, async () =&gt; await this.setLightAndDark( &#39;背景颜色&#39;, false, &#39;lightBgColor&#39;, &#39;darkBgColor&#39;, ), async () =&gt; await this.setLightAndDark( &#39;字体颜色&#39;, false, &#39;lightColor&#39;, &#39;darkColor&#39;, ), async () =&gt; &#123; const message = &#39;请自行搭配相应的字体颜色。\\n&#39; + &#39;白天蒙层透明设置为 0\\n&#39; + &#39;夜间请自行调整参考值 0.26\\n&#39; + &#39;夜间开启了（深色外观下调暗壁纸）参考值 0.35&#39;; const options = [&#39;取消&#39;, &#39;确定&#39;]; const index = await this.generateAlert(message, options); if (index === 0) return; const backImage = await this.getWidgetScreenShot(); if (backImage) &#123; await this.setBackgroundImage(backImage, true); await this.setBackgroundNightImage(backImage, true); &#125; &#125;, async () =&gt; &#123; await this.setLightAndDark( &#39;透明&#39;, &#39;若是设置了透明背景，请自行调整&#39;, &#39;lightOpacity&#39;, &#39;darkOpacity&#39;, ); &#125;, async () =&gt; &#123; await this.setBackgroundImage(false, false); await this.setBackgroundNightImage(false, true); &#125;, ]; _action[i] &amp;&amp; _action[i].call(this); &#125;, ...(this.useBoxJS ? [ async () =&gt; &#123; const a = new Alert(); a.title = &#39;BoxJS 域名&#39;; a.addTextField(&#39;域名&#39;, this.settings.boxjsDomain); a.addAction(&#39;确定&#39;); a.addCancelAction(&#39;取消&#39;); const id = await a.presentAlert(); if (id === -1) return; this.settings.boxjsDomain = a.textFieldValue(0); // 保存到本地 this.saveSettings(); &#125;, ] : []), async () =&gt; &#123; const options = [&#39;取消&#39;, &#39;确定&#39;]; const message = &#39;该操作不可逆，会清空所有组件配置！&#39;; const index = await this.generateAlert(message, options); if (index === 0) return; this.settings = &#123;&#125;; // 保存到本地 await this.setBackgroundImage(false, false); this.saveSettings(); &#125;, ]; const id = await alert.presentAlert(); if (id === -1) return; actions[id] &amp;&amp; actions[id].call(this); &#125;; init(widgetFamily = config.widgetFamily) &#123; // 组件大小：small,medium,large this.widgetFamily = widgetFamily; this.SETTING_KEY = this.md5(Script.name()); //用于配置所有的组件相关设置 // 文件管理器 // 提示：缓存数据不要用这个操作，这个是操作源码目录的，缓存建议存放在local temp目录中 this.FILE_MGR = FileManager[ module.filename.includes(&#39;Documents/iCloud~&#39;) ? &#39;iCloud&#39; : &#39;local&#39; ](); // 本地，用于存储图片等 this.FILE_MGR_LOCAL = FileManager.local(); this.BACKGROUND_KEY = this.FILE_MGR_LOCAL.joinPath( this.FILE_MGR_LOCAL.documentsDirectory(), &#39;bg_&#39; + this.SETTING_KEY + &#39;.jpg&#39;, ); this.BACKGROUND_NIGHT_KEY = this.FILE_MGR_LOCAL.joinPath( this.FILE_MGR_LOCAL.documentsDirectory(), &#39;bg_&#39; + this.SETTING_KEY + &#39;night.jpg&#39;, ); this.settings = this.getSettings(); this.settings.lightColor = this.settings.lightColor || &#39;#000&#39;; this.settings.darkColor = this.settings.darkColor || &#39;#fff&#39;; this.settings.boxjsDomain = this.settings.boxjsDomain || &#39;boxjs.net&#39;; this.settings.refreshAfterDate = this.settings.refreshAfterDate || &#39;30&#39;; this.settings.lightOpacity = this.settings.lightOpacity || &#39;0.4&#39;; this.settings.darkOpacity = this.settings.darkOpacity || &#39;0.7&#39;; this.prefix = this.settings.boxjsDomain; const lightBgColor = this.getColors(this.settings.lightBgColor); const darkBgColor = this.getColors(this.settings.darkBgColor); if (lightBgColor.length &gt; 1 || darkBgColor.length &gt; 1) &#123; this.backGroundColor = !Device.isUsingDarkAppearance() ? this.getBackgroundColor(lightBgColor || &#39;#fff&#39;) : this.getBackgroundColor(darkBgColor || &#39;#000&#39;); &#125; else &#123; this.backGroundColor = Color.dynamic( new Color(this.settings.lightBgColor || &#39;#fff&#39;), new Color(this.settings.darkBgColor || &#39;#000&#39;), ); &#125; this.widgetColor = Color.dynamic( new Color(this.settings.lightColor), new Color(this.settings.darkColor), ); &#125; getColors = (color = &#39;&#39;) =&gt; &#123; const colors = color.split(&#39;,&#39;); return colors; &#125;; getBackgroundColor = (colors) =&gt; &#123; const locations = []; const linearColor = new LinearGradient(); const cLen = colors.length; linearColor.colors = colors.map((item, index) =&gt; &#123; locations.push(Math.floor(((index + 1) / cLen) * 100) / 100); return new Color(item, 1); &#125;); linearColor.locations = locations; return linearColor; &#125;; /** * 注册点击操作菜单 * @param &#123;string&#125; name 操作函数名 * @param &#123;func&#125; func 点击后执行的函数 */ registerAction(name, func) &#123; this._actions[name] = func.bind(this); &#125; /** * base64 编码字符串 * @param &#123;string&#125; str 要编码的字符串 */ base64Encode(str) &#123; const data = Data.fromString(str); return data.toBase64String(); &#125; /** * base64解码数据 返回字符串 * @param &#123;string&#125; b64 base64编码的数据 */ base64Decode(b64) &#123; const data = Data.fromBase64String(b64); return data.toRawString(); &#125; /** * md5 加密字符串 * @param &#123;string&#125; str 要加密成md5的数据 */ md5(str) &#123; function d(n, t) &#123; var r = (65535 &amp; n) + (65535 &amp; t); return (((n &gt;&gt; 16) + (t &gt;&gt; 16) + (r &gt;&gt; 16)) &lt;&lt; 16) | (65535 &amp; r); &#125; function f(n, t, r, e, o, u) &#123; return d(((c = d(d(t, n), d(e, u))) &lt;&lt; (f = o)) | (c &gt;&gt;&gt; (32 - f)), r); var c, f; &#125; function l(n, t, r, e, o, u, c) &#123; return f((t &amp; r) | (~t &amp; e), n, t, o, u, c); &#125; function v(n, t, r, e, o, u, c) &#123; return f((t &amp; e) | (r &amp; ~e), n, t, o, u, c); &#125; function g(n, t, r, e, o, u, c) &#123; return f(t ^ r ^ e, n, t, o, u, c); &#125; function m(n, t, r, e, o, u, c) &#123; return f(r ^ (t | ~e), n, t, o, u, c); &#125; function i(n, t) &#123; var r, e, o, u; (n[t &gt;&gt; 5] |= 128 &lt;&lt; t % 32), (n[14 + (((t + 64) &gt;&gt;&gt; 9) &lt;&lt; 4)] = t); for ( var c = 1732584193, f = -271733879, i = -1732584194, a = 271733878, h = 0; h &lt; n.length; h += 16 ) (c = l((r = c), (e = f), (o = i), (u = a), n[h], 7, -680876936)), (a = l(a, c, f, i, n[h + 1], 12, -389564586)), (i = l(i, a, c, f, n[h + 2], 17, 606105819)), (f = l(f, i, a, c, n[h + 3], 22, -1044525330)), (c = l(c, f, i, a, n[h + 4], 7, -176418897)), (a = l(a, c, f, i, n[h + 5], 12, 1200080426)), (i = l(i, a, c, f, n[h + 6], 17, -1473231341)), (f = l(f, i, a, c, n[h + 7], 22, -45705983)), (c = l(c, f, i, a, n[h + 8], 7, 1770035416)), (a = l(a, c, f, i, n[h + 9], 12, -1958414417)), (i = l(i, a, c, f, n[h + 10], 17, -42063)), (f = l(f, i, a, c, n[h + 11], 22, -1990404162)), (c = l(c, f, i, a, n[h + 12], 7, 1804603682)), (a = l(a, c, f, i, n[h + 13], 12, -40341101)), (i = l(i, a, c, f, n[h + 14], 17, -1502002290)), (c = v( c, (f = l(f, i, a, c, n[h + 15], 22, 1236535329)), i, a, n[h + 1], 5, -165796510, )), (a = v(a, c, f, i, n[h + 6], 9, -1069501632)), (i = v(i, a, c, f, n[h + 11], 14, 643717713)), (f = v(f, i, a, c, n[h], 20, -373897302)), (c = v(c, f, i, a, n[h + 5], 5, -701558691)), (a = v(a, c, f, i, n[h + 10], 9, 38016083)), (i = v(i, a, c, f, n[h + 15], 14, -660478335)), (f = v(f, i, a, c, n[h + 4], 20, -405537848)), (c = v(c, f, i, a, n[h + 9], 5, 568446438)), (a = v(a, c, f, i, n[h + 14], 9, -1019803690)), (i = v(i, a, c, f, n[h + 3], 14, -187363961)), (f = v(f, i, a, c, n[h + 8], 20, 1163531501)), (c = v(c, f, i, a, n[h + 13], 5, -1444681467)), (a = v(a, c, f, i, n[h + 2], 9, -51403784)), (i = v(i, a, c, f, n[h + 7], 14, 1735328473)), (c = g( c, (f = v(f, i, a, c, n[h + 12], 20, -1926607734)), i, a, n[h + 5], 4, -378558, )), (a = g(a, c, f, i, n[h + 8], 11, -2022574463)), (i = g(i, a, c, f, n[h + 11], 16, 1839030562)), (f = g(f, i, a, c, n[h + 14], 23, -35309556)), (c = g(c, f, i, a, n[h + 1], 4, -1530992060)), (a = g(a, c, f, i, n[h + 4], 11, 1272893353)), (i = g(i, a, c, f, n[h + 7], 16, -155497632)), (f = g(f, i, a, c, n[h + 10], 23, -1094730640)), (c = g(c, f, i, a, n[h + 13], 4, 681279174)), (a = g(a, c, f, i, n[h], 11, -358537222)), (i = g(i, a, c, f, n[h + 3], 16, -722521979)), (f = g(f, i, a, c, n[h + 6], 23, 76029189)), (c = g(c, f, i, a, n[h + 9], 4, -640364487)), (a = g(a, c, f, i, n[h + 12], 11, -421815835)), (i = g(i, a, c, f, n[h + 15], 16, 530742520)), (c = m( c, (f = g(f, i, a, c, n[h + 2], 23, -995338651)), i, a, n[h], 6, -198630844, )), (a = m(a, c, f, i, n[h + 7], 10, 1126891415)), (i = m(i, a, c, f, n[h + 14], 15, -1416354905)), (f = m(f, i, a, c, n[h + 5], 21, -57434055)), (c = m(c, f, i, a, n[h + 12], 6, 1700485571)), (a = m(a, c, f, i, n[h + 3], 10, -1894986606)), (i = m(i, a, c, f, n[h + 10], 15, -1051523)), (f = m(f, i, a, c, n[h + 1], 21, -2054922799)), (c = m(c, f, i, a, n[h + 8], 6, 1873313359)), (a = m(a, c, f, i, n[h + 15], 10, -30611744)), (i = m(i, a, c, f, n[h + 6], 15, -1560198380)), (f = m(f, i, a, c, n[h + 13], 21, 1309151649)), (c = m(c, f, i, a, n[h + 4], 6, -145523070)), (a = m(a, c, f, i, n[h + 11], 10, -1120210379)), (i = m(i, a, c, f, n[h + 2], 15, 718787259)), (f = m(f, i, a, c, n[h + 9], 21, -343485551)), (c = d(c, r)), (f = d(f, e)), (i = d(i, o)), (a = d(a, u)); return [c, f, i, a]; &#125; function a(n) &#123; for (var t = &#39;&#39;, r = 32 * n.length, e = 0; e &lt; r; e += 8) t += String.fromCharCode((n[e &gt;&gt; 5] &gt;&gt;&gt; e % 32) &amp; 255); return t; &#125; function h(n) &#123; var t = []; for (t[(n.length &gt;&gt; 2) - 1] = void 0, e = 0; e &lt; t.length; e += 1) t[e] = 0; for (var r = 8 * n.length, e = 0; e &lt; r; e += 8) t[e &gt;&gt; 5] |= (255 &amp; n.charCodeAt(e / 8)) &lt;&lt; e % 32; return t; &#125; function e(n) &#123; for (var t, r = &#39;0123456789abcdef&#39;, e = &#39;&#39;, o = 0; o &lt; n.length; o += 1) (t = n.charCodeAt(o)), (e += r.charAt((t &gt;&gt;&gt; 4) &amp; 15) + r.charAt(15 &amp; t)); return e; &#125; function r(n) &#123; return unescape(encodeURIComponent(n)); &#125; function o(n) &#123; return a(i(h((t = r(n))), 8 * t.length)); var t; &#125; function u(n, t) &#123; return (function (n, t) &#123; var r, e, o = h(n), u = [], c = []; for ( u[15] = c[15] = void 0, 16 &lt; o.length &amp;&amp; (o = i(o, 8 * n.length)), r = 0; r &lt; 16; r += 1 ) (u[r] = 909522486 ^ o[r]), (c[r] = 1549556828 ^ o[r]); return ( (e = i(u.concat(h(t)), 512 + 8 * t.length)), a(i(c.concat(e), 640)) ); &#125;)(r(n), r(t)); &#125; function t(n, t, r) &#123; return t ? (r ? u(t, n) : e(u(t, n))) : r ? o(n) : e(o(n)); &#125; return t(str); &#125; /** * 渲染标题内容 * @param &#123;object&#125; widget 组件对象 * @param &#123;string&#125; icon 图标地址 * @param &#123;string&#125; title 标题内容 * @param &#123;bool|color&#125; color 字体的颜色（自定义背景时使用，默认系统） */ async renderHeader(widget, icon, title, color = false) &#123; let header = widget.addStack(); header.centerAlignContent(); try &#123; const image = await this.$request.get(icon, &#39;IMG&#39;); let _icon = header.addImage(image); _icon.imageSize = new Size(14, 14); _icon.cornerRadius = 4; &#125; catch (e) &#123; console.log(e); &#125; header.addSpacer(10); let _title = header.addText(title); if (color) _title.textColor = color; _title.textOpacity = 0.7; _title.font = Font.boldSystemFont(12); _title.lineLimit = 1; widget.addSpacer(15); return widget; &#125; /** * @param message 描述内容 * @param options 按钮 * @returns &#123;Promise&lt;number&gt;&#125; */ async generateAlert(message, options) &#123; let alert = new Alert(); alert.message = message; for (const option of options) &#123; alert.addAction(option); &#125; return await alert.presentAlert(); &#125; /** * 弹出一个通知 * @param &#123;string&#125; title 通知标题 * @param &#123;string&#125; body 通知内容 * @param &#123;string&#125; url 点击后打开的URL */ async notify(title, body, url, opts = &#123;&#125;) &#123; let n = new Notification(); n = Object.assign(n, opts); n.title = title; n.body = body; if (url) n.openURL = url; return await n.schedule(); &#125; /** * 给图片加一层半透明遮罩 * @param &#123;Image&#125; img 要处理的图片 * @param &#123;string&#125; color 遮罩背景颜色 * @param &#123;float&#125; opacity 透明度 */ async shadowImage(img, color = &#39;#000000&#39;, opacity = 0.7) &#123; if (!img) return; if (opacity === 0) return img; let ctx = new DrawContext(); // 获取图片的尺寸 ctx.size = img.size; ctx.drawImageInRect( img, new Rect(0, 0, img.size[&#39;width&#39;], img.size[&#39;height&#39;]), ); ctx.setFillColor(new Color(color, opacity)); ctx.fillRect(new Rect(0, 0, img.size[&#39;width&#39;], img.size[&#39;height&#39;])); return await ctx.getImage(); &#125; /** * 获取当前插件的设置 * @param &#123;boolean&#125; json 是否为json格式 */ getSettings(json = true) &#123; let res = json ? &#123;&#125; : &#39;&#39;; let cache = &#39;&#39;; if (Keychain.contains(this.SETTING_KEY)) &#123; cache = Keychain.get(this.SETTING_KEY); &#125; if (json) &#123; try &#123; res = JSON.parse(cache); &#125; catch (e) &#123;&#125; &#125; else &#123; res = cache; &#125; return res; &#125; /** * 存储当前设置 * @param &#123;bool&#125; notify 是否通知提示 */ saveSettings(notify = true) &#123; let res = typeof this.settings === &#39;object&#39; ? JSON.stringify(this.settings) : String(this.settings); Keychain.set(this.SETTING_KEY, res); if (notify) this.notify(&#39;设置成功&#39;, &#39;桌面组件稍后将自动刷新&#39;); &#125; /** * 获取当前插件是否有自定义背景图片 * @reutrn img | false */ getBackgroundImage() &#123; let result = null; if (this.FILE_MGR_LOCAL.fileExists(this.BACKGROUND_KEY)) &#123; result = Image.fromFile(this.BACKGROUND_KEY); &#125; if ( Device.isUsingDarkAppearance() &amp;&amp; this.FILE_MGR_LOCAL.fileExists(this.BACKGROUND_NIGHT_KEY) ) &#123; result = Image.fromFile(this.BACKGROUND_NIGHT_KEY); &#125; return result; &#125; /** * 设置当前组件的背景图片 * @param &#123;Image&#125; img */ setBackgroundImage(img, notify = true) &#123; if (!img) &#123; // 移除背景 if (this.FILE_MGR_LOCAL.fileExists(this.BACKGROUND_KEY)) &#123; this.FILE_MGR_LOCAL.remove(this.BACKGROUND_KEY); &#125; if (notify) this.notify(&#39;移除成功&#39;, &#39;小组件白天背景图片已移除，稍后刷新生效&#39;); &#125; else &#123; // 设置背景 // 全部设置一遍， this.FILE_MGR_LOCAL.writeImage(this.BACKGROUND_KEY, img); if (notify) this.notify(&#39;设置成功&#39;, &#39;小组件白天背景图片已设置！稍后刷新生效&#39;); &#125; &#125; setBackgroundNightImage(img, notify = true) &#123; if (!img) &#123; // 移除背景 if (this.FILE_MGR_LOCAL.fileExists(this.BACKGROUND_NIGHT_KEY)) &#123; this.FILE_MGR_LOCAL.remove(this.BACKGROUND_NIGHT_KEY); &#125; if (notify) this.notify(&#39;移除成功&#39;, &#39;小组件夜间背景图片已移除，稍后刷新生效&#39;); &#125; else &#123; // 设置背景 // 全部设置一遍， this.FILE_MGR_LOCAL.writeImage(this.BACKGROUND_NIGHT_KEY, img); if (notify) this.notify(&#39;设置成功&#39;, &#39;小组件夜间背景图片已设置！稍后刷新生效&#39;); &#125; &#125; getRandomArrayElements(arr, count) &#123; let shuffled = arr.slice(0), i = arr.length, min = i - count, temp, index; min = min &gt; 0 ? min : 0; while (i-- &gt; min) &#123; index = Math.floor((i + 1) * Math.random()); temp = shuffled[index]; shuffled[index] = shuffled[i]; shuffled[i] = temp; &#125; return shuffled.slice(min); &#125; textFormat = &#123; defaultText: &#123; size: 14, font: &#39;regular&#39;, color: this.widgetColor &#125;, battery: &#123; size: 10, font: &#39;bold&#39;, color: this.widgetColor &#125;, title: &#123; size: 16, font: &#39;semibold&#39;, color: this.widgetColor &#125;, SFMono: &#123; size: 12, font: &#39;SF Mono&#39;, color: this.widgetColor &#125;, &#125;; provideFont = (fontName, fontSize) =&gt; &#123; const fontGenerator = &#123; ultralight: function () &#123; return Font.ultraLightSystemFont(fontSize); &#125;, light: function () &#123; return Font.lightSystemFont(fontSize); &#125;, regular: function () &#123; return Font.regularSystemFont(fontSize); &#125;, medium: function () &#123; return Font.mediumSystemFont(fontSize); &#125;, semibold: function () &#123; return Font.semiboldSystemFont(fontSize); &#125;, bold: function () &#123; return Font.boldSystemFont(fontSize); &#125;, heavy: function () &#123; return Font.heavySystemFont(fontSize); &#125;, black: function () &#123; return Font.blackSystemFont(fontSize); &#125;, italic: function () &#123; return Font.italicSystemFont(fontSize); &#125;, &#125;; const systemFont = fontGenerator[fontName]; if (systemFont) &#123; return systemFont(); &#125; return new Font(fontName, fontSize); &#125;; provideText = (string, container, format) =&gt; &#123; const textItem = container.addText(string); const textFont = format.font; const textSize = format.size; const textColor = format.color; textItem.font = this.provideFont(textFont, textSize); textItem.textColor = textColor; return textItem; &#125;; &#125; // @base.end const Runing = async (Widget, default_args = &#39;&#39;, isDebug = true, extra) =&gt; &#123; let M = null; // 判断hash是否和当前设备匹配 if (config.runsInWidget) &#123; M = new Widget(args.widgetParameter || &#39;&#39;); if (extra) &#123; Object.keys(extra).forEach((key) =&gt; &#123; M[key] = extra[key]; &#125;); &#125; const W = await M.render(); try &#123; if (M.settings.refreshAfterDate) &#123; W.refreshAfterDate = new Date( new Date() + 1000 * 60 * parseInt(M.settings.refreshAfterDate), ); &#125; &#125; catch (e) &#123; console.log(e); &#125; if (W) &#123; Script.setWidget(W); Script.complete(); &#125; &#125; else &#123; let &#123; act, data, __arg, __size &#125; = args.queryParameters; M = new Widget(__arg || default_args || &#39;&#39;); if (extra) &#123; Object.keys(extra).forEach((key) =&gt; &#123; M[key] = extra[key]; &#125;); &#125; if (__size) M.init(__size); if (!act || !M[&#39;_actions&#39;]) &#123; // 弹出选择菜单 const actions = M[&#39;_actions&#39;]; const _actions = [ // 预览组件 async (debug = false) =&gt; &#123; let a = new Alert(); a.title = &#39;预览组件&#39;; a.message = &#39;测试桌面组件在各种尺寸下的显示效果&#39;; a.addAction(&#39;小尺寸 Small&#39;); a.addAction(&#39;中尺寸 Medium&#39;); a.addAction(&#39;大尺寸 Large&#39;); a.addAction(&#39;全部 All&#39;); a.addCancelAction(&#39;取消操作&#39;); const funcs = []; if (debug) &#123; for (let _ in actions) &#123; a.addAction(_); funcs.push(actions[_].bind(M)); &#125; a.addDestructiveAction(&#39;停止调试&#39;); &#125; let i = await a.presentSheet(); if (i === -1) return; let w; switch (i) &#123; case 0: M.widgetFamily = &#39;small&#39;; w = await M.render(); w &amp;&amp; (await w.presentSmall()); break; case 1: M.widgetFamily = &#39;medium&#39;; w = await M.render(); w &amp;&amp; (await w.presentMedium()); break; case 2: M.widgetFamily = &#39;large&#39;; w = await M.render(); w &amp;&amp; (await w.presentLarge()); break; case 3: M.widgetFamily = &#39;small&#39;; w = await M.render(); w &amp;&amp; (await w.presentSmall()); M.widgetFamily = &#39;medium&#39;; w = await M.render(); w &amp;&amp; (await w.presentMedium()); M.widgetFamily = &#39;large&#39;; w = await M.render(); w &amp;&amp; (await w.presentLarge()); break; default: const func = funcs[i - 4]; if (func) await func(); break; &#125; return i; &#125;, ]; const alert = new Alert(); alert.title = M.name; alert.message = M.desc; alert.addAction(&#39;预览组件&#39;); for (let _ in actions) &#123; alert.addAction(_); _actions.push(actions[_]); &#125; alert.addCancelAction(&#39;取消操作&#39;); const idx = await alert.presentSheet(); if (_actions[idx]) &#123; const func = _actions[idx]; await func(); &#125; return; &#125; let _tmp = act .split(&#39;-&#39;) .map((_) =&gt; _[0].toUpperCase() + _.substr(1)) .join(&#39;&#39;); let _act = &#39;action&#39; + _tmp; if (M[_act] &amp;&amp; typeof M[_act] === &#39;function&#39;) &#123; const func = M[_act].bind(M); await func(data); &#125; &#125; &#125;; module.exports = &#123; DmYY, Runing &#125;; 如图所示。 新建电信小组件之后复制下面的代码去新建电信流量话费信息小组件。 // 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能 if (typeof require === &#39;undefined&#39;) require = importModule; const &#123;DmYY, Runing&#125; = require(&#39;./DmYY&#39;); // @组件代码开始 class Widget extends DmYY &#123; constructor(arg) &#123; super(arg); this.name = &#39;中国电信&#39;; this.en = &#39;ChinaTelecom&#39;; this.Run(); &#125; cookie = &#39;&#39;; authToken = &#39;&#39;; fgCircleColor = Color.dynamic(new Color(&#39;#dddef3&#39;), new Color(&#39;#fff&#39;)); percentColor = this.widgetColor; textColor1 = Color.dynamic(new Color(&#39;#333&#39;), new Color(&#39;#fff&#39;)); textColor2 = this.widgetColor; circleColor1 = new Color(&#39;#ffbb73&#39;); circleColor2 = new Color(&#39;#ff0029&#39;); circleColor3 = new Color(&#39;#00b800&#39;); circleColor4 = new Color(&#39;#8376f9&#39;); iconColor = new Color(&#39;#827af1&#39;); format = (str) =&gt; &#123; return parseInt(str) &gt;= 10 ? str : `0$&#123;str&#125;`; &#125;; date = new Date(); arrUpdateTime = [ this.format(this.date.getMonth() + 1), this.format(this.date.getDate()), this.format(this.date.getHours()), this.format(this.date.getMinutes()), ]; // percent 的计算方式，剩余/总量 * 100 = 百分比| 百分比 * 3.6 ，为显示进度。 phoneBill = &#123; percent: 0, label: &#39;话费剩余&#39;, count: 0, unit: &#39;元&#39;, icon: &#39;yensign.circle&#39;, circleColor: this.circleColor1, &#125;; flow = &#123; percent: 0, label: &#39;流量剩余&#39;, count: 0, unit: &#39;M&#39;, icon: &#39;waveform.path.badge.minus&#39;, circleColor: this.circleColor2, &#125;; voice = &#123; percent: 0, label: &#39;语音剩余&#39;, count: 0, unit: &#39;分钟&#39;, icon: &#39;mic&#39;, circleColor: this.circleColor3, &#125;; updateTime = &#123; percent: 0, label: &#39;更新时间&#39;, count: `$&#123;this.arrUpdateTime[2]&#125;:$&#123;this.arrUpdateTime[3]&#125;`, unit: &#39;&#39;, urlIcon: &#39;https://raw.githubusercontent.com/Orz-3/mini/master/10000.png&#39;, circleColor: this.circleColor4, &#125;; canvSize = 100; canvWidth = 4; // circle thickness canvRadius = 100; // circle radius dayRadiusOffset = 63; canvTextSize = 38; options = &#123; headers: &#123; // type: &quot;alipayMiniApp&quot;, // &quot;User-Agent&quot;: &quot;TYUserCenter/2.8 (iPhone; iOS 14.0; Scale/3.00)&quot;, &#125;, // body: &quot;t=tysuit&quot;, method: &#39;POST&#39;, &#125;; fetchUri = &#123; detail: &#39;https://e.189.cn/store/user/package_detail.do&#39;, balance: &#39;https://e.189.cn/store/user/balance_new.do&#39;, &#125;; init = async () =&gt; &#123; try &#123; const nowHours = this.date.getHours(); const updateHours = nowHours &gt; 12 ? 24 : 12; this.updateTime.percent = Math.floor((nowHours / updateHours) * 100); await this.getData(); &#125; catch (e) &#123; console.log(e); &#125; &#125;; // MB 和 GB 自动转换 formatFlow(number) &#123; const n = number / 1024; if (n &lt; 1024) &#123; return &#123;count: n.toFixed(2), unit: &#39;M&#39;&#125;; &#125; return &#123;count: (n / 1024).toFixed(2), unit: &#39;G&#39;&#125;; &#125; getData = async () =&gt; &#123; const detail = await this.http(&#123; url: this.fetchUri.detail, ...this.options, &#125;); console.log(detail); const balance = await this.http(&#123; url: this.fetchUri.balance, ...this.options, &#125;); if (detail.result === 0) &#123; // 套餐分钟数 this.voice.percent = Math.floor( (parseInt(detail.voiceBalance) / parseInt(detail.voiceAmount)) * 100, ); this.voice.count = detail.voiceBalance; console.log(detail.items); if (!detail.count &amp;&amp; !detail.total) &#123; detail.items.forEach((data) =&gt; &#123; if (data.offerType !== 19) &#123; data.items.forEach((item) =&gt; &#123; if (item.unitTypeId === &#39;3&#39;) &#123; if (item.usageAmount !== &#39;0&#39; &amp;&amp; item.balanceAmount !== &#39;0&#39;) &#123; this.flow.percent = Math.floor( (item.balanceAmount / (item.ratableAmount || 1)) * 100, ); const flow = this.formatFlow(item.balanceAmount); this.flow.count = flow.count; this.flow.unit = flow.unit; this.flow.max = item.ratableAmount; &#125; &#125; &#125;); &#125; &#125;); &#125; else &#123; this.flow.percent = Math.floor( (detail.balance / (detail.total || 1)) * 100, ); const flow = this.formatFlow(detail.balance); this.flow.count = flow.count; this.flow.unit = flow.unit; this.flow.max = detail.total; &#125; &#125; if (balance.result === 0) &#123; // 余额 this.phoneBill.count = parseFloat( parseInt(balance.totalBalanceAvailable) / 100).toFixed(2) &#125; this.phoneBill.percent = Math.floor((this.phoneBill.count / 100) * 100); &#125;; makeCanvas() &#123; const canvas = new DrawContext(); canvas.opaque = false; canvas.respectScreenScale = true; canvas.size = new Size(this.canvSize, this.canvSize); return canvas; &#125; makeCircle(canvas, radiusOffset, degree, color) &#123; let ctr = new Point(this.canvSize / 2, this.canvSize / 2); // Outer circle const bgx = ctr.x - (this.canvRadius - radiusOffset); const bgy = ctr.y - (this.canvRadius - radiusOffset); const bgd = 2 * (this.canvRadius - radiusOffset); const bgr = new Rect(bgx, bgy, bgd, bgd); canvas.setStrokeColor(this.fgCircleColor); canvas.setLineWidth(3); canvas.strokeEllipse(bgr); // Inner circle canvas.setFillColor(color); for (let t = 0; t &lt; degree; t++) &#123; const rect_x = ctr.x + (this.canvRadius - radiusOffset) * this.sinDeg(t) - this.canvWidth / 2; const rect_y = ctr.y - (this.canvRadius - radiusOffset) * this.cosDeg(t) - this.canvWidth / 2; const rect_r = new Rect(rect_x, rect_y, this.canvWidth, this.canvWidth); canvas.fillEllipse(rect_r); &#125; &#125; drawText(txt, canvas, txtOffset, fontSize) &#123; const txtRect = new Rect( this.canvTextSize / 2.6 - 20, txtOffset - this.canvTextSize / 1.4, this.canvSize, this.canvTextSize, ); canvas.setTextColor(this.percentColor); canvas.setFont(Font.boldSystemFont(fontSize)); canvas.setTextAlignedCenter(); canvas.drawTextInRect(`$&#123;txt&#125;`, txtRect); &#125; drawPointText(txt, canvas, txtPoint, fontSize) &#123; canvas.setTextColor(this.percentColor); canvas.setFont(Font.boldSystemFont(fontSize)); canvas.drawText(txt, txtPoint); &#125; sinDeg(deg) &#123; return Math.sin((deg * Math.PI) / 180); &#125; cosDeg(deg) &#123; return Math.cos((deg * Math.PI) / 180); &#125; setCircleText = (stack, data) =&gt; &#123; const stackCircle = stack.addStack(); const canvas = this.makeCanvas(); stackCircle.size = new Size(73, 73);//上下两组数据间隔 this.makeCircle( canvas, this.dayRadiusOffset, data.percent * 3.6, data.circleColor, ); this.drawText(data.percent, canvas, 75, 17); this.drawPointText(`%`, canvas, new Point(60, 50), 14);//百分号上下大小调节 stackCircle.backgroundImage = canvas.getImage(); stackCircle.setPadding(20, 0, 0, 0); stackCircle.addSpacer(); const icon = data.urlIcon ? &#123;image: data.icon&#125; : SFSymbol.named(data.icon); const imageIcon = stackCircle.addImage(icon.image); imageIcon.tintColor = this.iconColor; imageIcon.imageSize = new Size(14, 13); // canvas.drawImageInRect(icon.image, new Rect(110, 80, 60, 60)); stackCircle.addSpacer(); stack.addSpacer(5); const stackDesc = stack.addStack(); stackDesc.size = new Size(74, 69);//横向间隔调整 stackDesc.centerAlignContent(); stackDesc.layoutVertically(); stackDesc.addSpacer(10); const textLabel = this.textFormat.defaultText; textLabel.size = 13; textLabel.color = this.textColor2; this.provideText(data.label, stackDesc, textLabel); stackDesc.addSpacer(10); const stackDescFooter = stackDesc.addStack(); stackDescFooter.centerAlignContent(); const textCount = this.textFormat.title; textCount.size = 16; textCount.color = this.textColor1; this.provideText(`$&#123;data.count&#125;`, stackDescFooter, textCount); stackDescFooter.addSpacer(2); this.provideText(data.unit, stackDescFooter, textLabel); &#125;; renderSmall = async (w) =&gt; &#123; w.setPadding(5, 5, 5, 5); const stackBody = w.addStack(); stackBody.layoutVertically(); const stackTop = stackBody.addStack(); this.setCircleText(stackTop, this.phoneBill); const stackBottom = stackBody.addStack(); this.setCircleText(stackBottom, this.flow); const stackFooter = stackBody.addStack(); stackFooter.addSpacer(); const text = this.textFormat.defaultText; text.color = new Color(&#39;#aaa&#39;); this.provideText( `电信更新：$&#123;this.arrUpdateTime[2]&#125;:$&#123;this.arrUpdateTime[3]&#125;`, stackFooter, text, ); stackFooter.addSpacer(); return w; &#125;; renderMedium = async (w) =&gt; &#123; const stackBody = w.addStack(); stackBody.layoutVertically(); const stackTop = stackBody.addStack(); this.setCircleText(stackTop, this.phoneBill); this.setCircleText(stackTop, this.flow); const stackBottom = stackBody.addStack(); this.setCircleText(stackBottom, this.voice); this.updateTime.icon = await this.$request.get( this.updateTime.urlIcon, &#39;IMG&#39;, ); this.setCircleText(stackBottom, this.updateTime); return w; &#125;; renderLarge = async (w) =&gt; &#123; return await this.renderMedium(w); &#125;; renderWebView = async () =&gt; &#123; const webView = new WebView(); const url = &#39;https://e.189.cn/index.do&#39;; await webView.loadURL(url); await webView.present(false); const request = new Request(this.fetchUri.detail); request.method = &#39;POST&#39;; const response = await request.loadJSON(); console.log(response); if (response.result === -10001) &#123; const index = await this.generateAlert(&#39;未获取到用户信息&#39;, [ &#39;取消&#39;, &#39;重试&#39;, ]); if (index === 0) return; await this.renderWebView(); &#125; else &#123; const cookies = request.response.cookies; let cookie = []; cookie = cookies.map((item) =&gt; `$&#123;item.name&#125;=$&#123;item.value&#125;`); cookie = cookie.join(&#39;; &#39;); this.settings.cookie = cookie; this.saveSettings(); &#125; &#125;; Run() &#123; if (config.runsInApp) &#123; const widgetInitConfig = &#123;cookie: &#39;china_telecom_cookie&#39;&#125;; this.registerAction(&#39;颜色配置&#39;, async () =&gt; &#123; await this.setAlertInput( `$&#123;this.name&#125;颜色配置`, &#39;进度条颜色|底圈颜色\\n图标颜色|比值颜色|值颜色&#39;, &#123; step1: &#39;进度颜色 1&#39;, step2: &#39;进度颜色 2&#39;, step3: &#39;进度颜色 3&#39;, step4: &#39;进度颜色 4&#39;, inner: &#39;底圈颜色&#39;, icon: &#39;图标颜色&#39;, percent: &#39;比值颜色&#39;, value: &#39;值颜色&#39;, &#125;, ); &#125;); this.registerAction(&#39;账号设置&#39;, async () =&gt; &#123; const index = await this.generateAlert(&#39;设置账号信息&#39;, [ &#39;取消&#39;, &#39;网站登录&#39;, ]); if (index === 0) return; await this.renderWebView(); &#125;); this.registerAction(&#39;代理缓存&#39;, async () =&gt; &#123; await this.setCacheBoxJSData(widgetInitConfig); &#125;); this.registerAction(&#39;基础设置&#39;, this.setWidgetConfig); &#125; const &#123; step1, step2, step3, step4, inner, icon, percent, value, // authToken, cookie, &#125; = this.settings; this.fgCircleColor = inner ? new Color(inner) : this.fgCircleColor; this.textColor1 = value ? new Color(value) : this.textColor1; this.phoneBill.circleColor = step1 ? new Color(step1) : this.circleColor1; this.flow.circleColor = step2 ? new Color(step2) : this.circleColor2; this.voice.circleColor = step3 ? new Color(step3) : this.circleColor3; this.updateTime.circleColor = step4 ? new Color(step4) : this.circleColor4; this.iconColor = icon ? new Color(icon) : this.iconColor; this.percentColor = percent ? new Color(percent) : this.percentColor; this.cookie = cookie; if (this.cookie) this.options.headers.cookie = this.cookie; // this.authToken = authToken; // if (this.authToken) this.options.headers.authToken = this.authToken; &#125; /** * 渲染函数，函数名固定 * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容 */ async render() &#123; await this.init(); const widget = new ListWidget(); widget.setPadding(0, 0, 0, 0); await this.getWidgetBackgroundImage(widget); if (this.widgetFamily === &#39;medium&#39;) &#123; return await this.renderMedium(widget); &#125; else if (this.widgetFamily === &#39;large&#39;) &#123; return await this.renderLarge(widget); &#125; else &#123; return await this.renderSmall(widget); &#125; &#125; &#125; // @组件代码结束 // await Runing(Widget, &quot;&quot;, false); // 正式环境 await Runing(Widget, args.widgetParameter, false); //远程开发环境 新建完成后点击运行，先登录你的天翼账号，然后它就会自动获取登录信息。注意登录信息有时效性，电信的一次登录可以用一星期，时间还算比较长，比较实用。移动和联通也有，但是移动和联通用不了两天又要重新登录。有时候早上登录晚上就又要重新弄，所以不太适合。点击账号设置，登录天翼账号。 完成成功获取到登录信息后就可以添加小组件了。","categories":[{"name":"iOS小组件","slug":"iOS小组件","permalink":"https://goopher.tk/categories/iOS%E5%B0%8F%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Scriptable","slug":"Scriptable","permalink":"https://goopher.tk/tags/Scriptable/"},{"name":"iOS小组件","slug":"iOS小组件","permalink":"https://goopher.tk/tags/iOS%E5%B0%8F%E7%BB%84%E4%BB%B6/"}],"author":"GOOPHER"},{"title":"Switch模拟器Yuzu","slug":"Yuzu","date":"2021-02-22T16:30:31.000Z","updated":"2021-05-09T13:11:37.559Z","comments":true,"path":"posts/50728.html","link":"","permalink":"https://goopher.tk/posts/50728.html","excerpt":"","text":"前言玩腻了安卓模拟器，虚拟机的话可以尝试一下这款Switch模拟器。不过，这个对于配置的要求有一些高。 简介Yuzu支持nps xci格式的Switch游戏包，不支持nsz等格式的游戏，要运行nsz格式需要将其转换为nps格式。nsz格式实际上就是nps的压缩包，但是并不能直接将其解压，需要使用转换工具才可以。并且，转换出的游戏不一定能运行。 下载地址Yuzu： 点击下载Keys： 点击下载 安装下载好Yuzu Updater后将其解压，放在你喜欢的地方。在运行前，需要你将你的显卡驱动升级至最新，以确保正常运行。升级完成后，打开Yuzu Updater文件夹，运行里面的Yuzu Updater.exe程序。首次运行，需要进行安装操作。Version：版本 默认的Latest最新版就好。勾选下面的三个选择框。Auto-Launch：自动运行模拟器。Admin Mode：管理员模式。Auto-Close：自动关闭升级程序。之后点击Install下载安装即可。安装完成后，首次运行Yuzu会报错，这是因为没有导入Keys。 导入Keys点击文件，Open yuzu Folder。把下载好的Keys解压放入其中，此步骤重要。之后将模拟器关闭，再次运行Yuzu Updater.exe打开。经过上面的设置，以后每次都通过Yuzu Updater.exe运行即可保证自动将Yuzu更新到最新版。 导入游戏双击添加游戏目录，选择nps格式的游戏所在目录即可。注意是选择目录，不是选择nps本体。 运行游戏前的设定点击模拟，Configure。取消运行速度限制，勾选多核仿真。CPU精度设置为精确。图形根据你的显卡设置推荐使用OpenGL。设置完成后就可以双击游戏图标运行游戏了。 游戏资源的下载地址注意这里提供的网站有些游戏是收费的，不过也便宜，自己看着弄，我也没恰饭。我在想要不要买包含塞尔达旷野之息的那个包，售价9.9元，我这个电脑看着有点带不动这些复杂一点的游戏。游戏资源下载：点击下载 关于nsz转nps需要工具转换，工具依赖Python、Framework 4.8下载地址：Python3.7win7及以上系统：点击下载Framework 4.8：点击下载转换工具：点击下载检查工具：点击下载 转换教程先将Python和Framework安装好，然后解压转换工具和检查工具。运行NSCB.bat在弹出的窗口中输入8并回车输入2并回车将你要转换的nsz文件拖进去并回车输入1回车输入3回车等待进度条完成，即可转换完成的nps文件在NSCB_output文件夹内将其移动到其他目录下下导入模拟器即可。","categories":[{"name":"模拟器","slug":"模拟器","permalink":"https://goopher.tk/categories/%E6%A8%A1%E6%8B%9F%E5%99%A8/"}],"tags":[{"name":"Yuzu","slug":"Yuzu","permalink":"https://goopher.tk/tags/Yuzu/"},{"name":"模拟器","slug":"模拟器","permalink":"https://goopher.tk/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"游戏","slug":"游戏","permalink":"https://goopher.tk/tags/%E6%B8%B8%E6%88%8F/"}],"author":"GOOPHER"},{"title":"黑苹果基础（三）","slug":"jichusan","date":"2021-02-17T09:30:30.000Z","updated":"2021-05-09T13:11:37.562Z","comments":true,"path":"posts/51205.html","link":"","permalink":"https://goopher.tk/posts/51205.html","excerpt":"","text":"将OC、Clover引导安装至硬盘脱离U盘引导需要DiskGenius软件、EasyUEFI或者其他可以管理UEFI启动项的软件，这里以EasyUEFI为例。注意EasyUEFI要下载破解版的，这里提供一个，点击直达下载首先准备好要安装至硬盘的引导，如果在U盘里面需要先打开DiskGenius软件将U盘的EFI复制出来。选中，将其复制到桌面或者其他地方。 OC的安装打开准备好的EFI，打开DiskGenius软件，点击硬盘的ESP分区，点击浏览文件，看到EFI文件夹点击进去。然后将/OC文件夹复制进去。注意只用复制OC文件即可。BOOT文件夹可以不用，要是都复制进去了，BOOT文件夹被替换，需要修复Windows引导。关于修复引导请看上一篇。复制进去之后我们打开EasyUEFI软件，添加引导项。OC0.6.6版本，将启动文件指定到EFI/OC/OpenCore.efi即可，启动项名称随意。OC0.6.5及其之前的版本，将启动项指定到EFI/OC/Bootstrap/Bootstrap.efi文件即可。 Clover的安装同理，只将EFI目录下的CLover文件夹复制到硬盘ESP分区EFI目录下即可。Boot文件夹不要动，动了就要修复win的引导。然后打开EasyUEFI添加启动项，启动文件指定到EFI/Clover/Clover.efi即可。搞机最忌懒，麻烦大家多看教程，多查资料。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"脱离U盘引导","slug":"脱离U盘引导","permalink":"https://goopher.tk/tags/%E8%84%B1%E7%A6%BBU%E7%9B%98%E5%BC%95%E5%AF%BC/"}],"author":"GOOPHER"},{"title":"黑苹果基础（二）","slug":"jichuer","date":"2021-02-15T16:30:31.000Z","updated":"2021-05-09T13:11:37.562Z","comments":true,"path":"posts/50300.html","link":"","permalink":"https://goopher.tk/posts/50300.html","excerpt":"","text":"在没有WEPE的U盘上创建分区并导入WEPE众所周知，搞机容易系统容易崩，如果没有一个PE则可能会陷入困境，所以PE这个还是非常有必要的。一般来说，如果你写入的是黑果小兵打包的系统镜像则一般带有WEPE，用DiskGenius分区软件则可以看到。有PE的可以跳过这看下面了。 创建放置WEPE的分区先插上U盘，打开DiskGenius软件，点击选中U盘。我们可以看到U盘后部有空闲的，在空闲上右键，建立ESP分区（一般来说建Fat32格式的分区也是可以的，不过建议用ESP隐藏。）。取消勾选MSR分区。点击确定后点击左上角的保存。选择是。我们可以看到多出一个ESP（2），就建好了。之后打开微PE软件，选择导出为ISO镜像文件。win10可以直接双击，会自动挂载打开。win7可以使用winrar等或者软碟通第三方软件打开。winrar打开后需要先解压。在桌面上或者你喜欢的地方新建一个文件夹并打开，然后解压放进去。然后使用DiskGenius软件，选中ESP（2）分区，点击浏览文件。将解压出来的WEPE直接拖动到ESP（2）里。选择是，复制完成后点击完成按钮。 使用使用：U盘插电脑上，开机亮屏时按F8呼出启动菜单（不同主板呼出启动菜单的快捷键不同，建议自己查看一下主板说明。），选择“UEFI：xxxxxU盘型号”这样的第二个（排第二个说明是主板读取到的U盘上的第二个分区，也就是ESP2，虽然它前面有一个mac的分区，但是主板读取不了mac的分区，所以忽略。因此，如果你的wepe在U盘的第一个分区里，OC、Clover在第二或者第三个分区里，就要对应选择第几个。） 黑苹果安装前必要的分区设置使用一颗单独的硬碟则可忽略此步骤。 为什么需要先对硬盘分区macOS系统安装对分区的要求不同于Windows系统，一般默认能安装win的分区类型却安装不了mac，所以需要先对硬盘进行分区。同时，有一些硬盘macOS并不支援，不能拿来安装使用，需要避坑。 要点安装mac系统的硬盘分区类型应为GPT（也就是GUID，如果你进入mac的安装，发现提示硬盘不是GUID类型，则是此步骤没有操作）。安装mac系统的硬盘上的ESP分区（也叫EFI分区）需要大于等于300兆最佳，如果你进入mac的安装发现抹盘失败，则是此步骤出现问题。 开始操作在开始操作前，我们需要先重启电脑，进入PE环境下操作。打开PE内的DiskGenius软件。找到我们需要安装macos的硬盘并选中，先查看硬盘的分区表类型。例如我这个分区表类型MBR，就不行，需要转为GUID。如果你这里显示GPT，则跳过往下看。 在左边硬盘上右键，转换分区表类型为GUID格式。（注意注意，此操作会导致win的引导失效，导致开机进不去win系统，需要修复引导才可以正常进入win系统，所以教程一定要细心看，看完整，另外win的激活也可能会掉，需要自行再激活一次。）之后点击左上角保存按钮，在弹出的对话框中选择是。硬盘的分区表类型就改为GPT了。 压缩出空闲，新建ESP分区。这里注意了，原先硬盘分区表类型就是GPT的也需要对EFI分区扩容操作，所请仔细看一下这一步骤。在原先的分区上右键，调整分区大小。在分区前部填入300m保持空闲，对于扩容EFI分区的这里填入100m即可。点击开始，确认是，完成后点击完成。我们便在硬盘头部得到了300m的空闲，在上面右键建立ESP分区。取消勾选MSR分区。点击确认，点击左上角保存按钮并在弹出的对话框中选择是即可。300m大小的EFI分区就建好了。对于需要扩容EFI分区的，则在原本的EFI分区上右键，选择调整分区大小，将后部空闲的100m扩进去即可。 创建安装mac用的分区由于mac特性，安装后很难对分区扩容，所以建议在安装前就给够大小，以免以后难弄。在需要分给mac的分区上右键，调整分区大小，建议越大越好。在分区后输入你需要的大小，点击开始。便得到了空闲，在空闲上右键，新建分区。文件系统类型选择exfat，mac（HFS+）之类都行，无所谓这个，之后安装mac时也是要抹掉的，自己好认这个分区就行。最后点击保存。 修复Windows引导MBR转GPT要修复win的引导。MBR转GPT要修复win的引导。MBR转GPT要修复win的引导。重要的事情说三遍！打开dism++工具。先选中要修复的系统，再选则工具箱，选择里面的引导修复，在弹出的对话框中默认选择是即可。最后打开DiskGenius软件，点击EFI分区，查看文件，里面有win的引导文件即可。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"PE","slug":"PE","permalink":"https://goopher.tk/tags/PE/"},{"name":"win引导修复","slug":"win引导修复","permalink":"https://goopher.tk/tags/win%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/"},{"name":"分区教程","slug":"分区教程","permalink":"https://goopher.tk/tags/%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"黑苹果基础（一）","slug":"jichu","date":"2021-02-10T16:30:31.000Z","updated":"2021-05-09T13:11:37.561Z","comments":true,"path":"posts/21510.html","link":"","permalink":"https://goopher.tk/posts/21510.html","excerpt":"","text":"UEFI启动的简要流程在这里先不讨论传统BIOS引导，传统引导方式需要模拟UEFI，推荐使用Clover模拟，OC模拟还有很多问题。 明白这个之后，我们可以知道对于黑苹果来说重要的就是EFI分区内的引导。常用的Clover和OC目前都有很多可以白嫖的案例，当然也可以自己配置一个引导，教程博客内有。 创建黑苹果启动盘推荐使用Transmac软件写入，下载链接在从无到有配置OC引导 这篇文章中。镜像推荐使用黑果小兵打包的，创建Big Sur之前的启动盘应使用至少8G的U盘，创建Big Sur的启动盘应至少16G。 将下载好的Transmac软件加压出来，之后右键–》以管理员方式运行。 找到U盘，右键–》选择第二项Format Disk for Mac，在弹出的选项框中选择Yes–》OK，稍等片刻，将U盘格式化为Mac的格式。 看到Format Complete后点击OK，格式化完成。 格式化之后win10可能弹出提示框，可直接关闭，这是win10无法读取Mac分区弹出的提示。 格式化完成后写入镜像，在U盘上右键，选择第三项Restore with Disk Image。 选择Yes。 点击红框内按钮，选择镜像。 在弹出的文件浏览里选择要写入的镜像，我这里写入的是我自己打包的镜像。 点击OK开始写入。 写入会比较慢，具体看U盘的写入速度和镜像的大小。 看到Restore Complete时点击OK，写入完成。 关闭Transmac软件。 检查下载DiskGenius软件打开，选择U盘。 可以看到U盘上有两个分区，第一个EFI分区就是引导（Clover、OC）存放的分区，第二个HFS+的分区就是mac镜像存放的分区（win下无法正常读取）。 如果你是写入的黑果小兵打包的镜像，应该在EFI分区下还会有一个微PE的分区，方便在win10无法进入时急救。 选择EFI分区，点击浏览文件，在这里就可以看到引导的目录。在这里可以将里面的引导复制出来，也可以删除，如果要将文件放入可直接拖拽进去。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"启动盘制作","slug":"启动盘制作","permalink":"https://goopher.tk/tags/%E5%90%AF%E5%8A%A8%E7%9B%98%E5%88%B6%E4%BD%9C/"}],"author":"GOOPHER"},{"title":"使用Github Actions自动化部署Hexo","slug":"useactionhexo","date":"2021-02-09T13:44:31.000Z","updated":"2021-05-09T13:11:37.564Z","comments":true,"path":"posts/64028.html","link":"","permalink":"https://goopher.tk/posts/64028.html","excerpt":"","text":"前言使用Github Actions自动化部署之后，可以脱离本地电脑，再也不用担心源码丢失。 新建私密仓库首先需要在GitHub上新建一个私密仓库，仓库名称随意，注意不要使用README初始化仓库。 生成公私秘钥对在mac的终端中执行： ssh-keygen -t rsa -C &quot;Github 的邮箱地址&quot; 之后生成的密钥默认存储在/用户/angushall/.ssh/目录下。 修改将Hexo博客的根目录复制到别的地方，显示隐藏文件夹，然后将里面的隐藏文件删除。之后将.ssh文件夹复制进去(这个可以不弄，我丢上去备份的)。再新建一个.github隐藏文件夹，里面新建一个workflows文件夹，在workflows里面新建一个自动化的配置文件hexoCI.yml其内容如下： # 自动化名称 name: Hexo Blog CI # 触发条件 on: push: branches: - main # 设置环境 jobs: build: runs-on: ubuntu-latest steps: # check it to your workflow can access it # from: https://github.com/actions/checkout - name: Checkout Repository master branch uses: actions/checkout@master # from: https://github.com/actions/setup-node - name: Setup Node.js 15.x uses: actions/setup-node@master with: node-version: &quot;15.x&quot; - name: 安装Hexo run: | npm install hexo-cli -g npm install - name: 设置密钥 env: HEXO_DEPLOY_PRIVATE_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_PRIVATE_KEY &#125;&#125; run: | mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts - name: 设置Git信息 run: | git config --global user.name &#39;你GitHub的用户名&#39; git config --global user.email &#39;你GitHub的邮箱&#39; - name: Hexo三连 run: | hexo clean hexo generate hexo deploy 修改博客根目录的_config.yml文件： deploy: type: git repo: //这里改成ssh的链接 branch: master 打开node_modules文件夹，删除里面的hexo-deployer-git。 配置配置公钥：在github 网站–&gt;Settings–&gt;SSH and GPG keys里，名称为HEXO_DEPLOY_PRIVATE_KEY，内容为.ssh/id_rsa.pub里的，注意复制的时候会多一个空格，把它删掉。配置私钥：在私有仓库的 Settings-&gt;Secrets 里，名称为HEXO_DEPLOY_PRIVATE_KEY，内容为.ssh/id_rsa里的，注意复制的时候会多一个空格，把它删掉。之后在终端中cd切换至改好的hexo博客目录里，将博客推送到私有仓库。 git init git add . git commit -m &quot;first commit&quot; git branch -M main git remote add origin git@github.com:用户名/私有仓库名.git git push -u origin main 查看效果点击私有仓库的Action查看，运行正常再看一下博客内容有没有问题。我在Actions运行之后发现博客里的效果等有缺失，发现是环境问题，将Node版本改为15.x后解决。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/tags/Hexo/"},{"name":"GitHub Action","slug":"GitHub-Action","permalink":"https://goopher.tk/tags/GitHub-Action/"},{"name":"自动化","slug":"自动化","permalink":"https://goopher.tk/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"}],"author":"GOOPHER"},{"title":"升级OpenCore066","slug":"updateoc066","date":"2021-02-04T08:57:31.000Z","updated":"2021-05-09T13:11:37.563Z","comments":true,"path":"posts/52146.html","link":"","permalink":"https://goopher.tk/posts/52146.html","excerpt":"","text":"注意从低版本的OC升级上来都应该手动配置（推荐），查看更新日志，比对与旧版本的不同进而修改，能减少许多问题。 下载OC066下载OcBinaryData常用驱动：AppleALCVirtualSMCLiluWhateverGreen 替换解压下载好的OpenCore-0.6.6-RELEASE.zip文件，进到OpenCore-0.6.6-RELEASE/X64/EFI/OC/中。另开一个文件窗口，将AppleAlc等驱动全部解压出来，并将kext驱动复制到刚才的OC/Kexts文件夹中，如图所示：挂载EFI，打开旧的OC文件夹。打开旧OC的Kexts文件夹，把没有更新的kext驱动复制过去。打开旧OC的ACPI文件夹，把里面的文件复制到新的OC的ACPI文件夹中。返回上一级目录，把config文件从旧OC复制到新的OC文件夹中。066去掉了启动保护，所以新的OC文件夹中没有Bootstrap这个文件夹。解压OcBinaryData-master.zip文件，将Resources文件夹复制到新的OC文件夹中替换覆盖。 修改config文件使用PlistEdit Pro软件打开OpenCore-0.6.6-RELEASE/Docs/Sample.plist示例文件和OpenCore-0.6.6-RELEASE/X64/EFI/OC/config.plist文件。比对这两个文件里不同，并将不同的地方改进config文件中。这一步要求细心，要是懒得比对的话可以使用OCC066版本打开config保存一下即可。经过比对，在Kernel-Quirks下新增了SetApfsTrimTimeout一项，手动加进config文件中：在Misc-Boot中新增LauncherOption和LauncherPath两项：在Misc-Security中去掉了BootProtect这项：在PlatformInfo-Generic下新增MaxBIOSVersion这项：在PlatformInfo下新增UseRawUuidEncoding这项：修改UEFI-Drivers里的HfsPlus.efi为OpenHfsPlus.efi：当然你想继续使用HfsPlus.efi的话也可以，记得将这个efi驱动复制到对应文件夹。在UEFI-Quirks下新增DisableSecurityPolicy这项：修改完成后保存config，打开EFI分区里的EFI文件夹，将BOOT和OC文件夹删除，再把新的BOOT和OC文件夹复制过去，重启电脑。（不推荐，容易翻车。）推荐：将新的OC复制到U盘中，从U盘启动确认没有问题再替换硬盘EFI分区中的文件。 查看更新是否成功打开Hackintool查看引导和内核拓展即可。 可能会遇到的问题Q1：更新后OC的引导丢失。这是因为之前使用的OC的启动保护，而066去掉了启动保护，所以需要重新添加引导项，启动文件指定到EFI/BOOT/BOOTx64.efi这个文件或者将启动文件指定到EFI/OC/OpenCore.efi这个文件，OC066可以直接从OpenCore.efi启动了。Q2:以前的启动保护没了，有没有替代？（为什么需要使用启动保护：使用/EFI/BOOT/BOOTx64.efi的时候，容易被win10或者其他系统在安装/升级时替换掉，导致OC引导项丢失。）打开config编辑，在Misc-Boot下将LauncherOption的值改为Full，将UEFI-Quirks下的RequestBootVarRouting的值改为Yes/True。重启电脑之后重置一下NVRAM，OC便会将启动项改为OpenCore.efi并锁定在第一个。Q3：我之前都没有升级OC，跳版本升级怎么办？跳版本升级也是与上面的步骤一致，不同的就是config中需要修改的项更多，需要更仔细一些，当然你也可以直接用OCC066对应版本打开config保存一下，OCC便会自动升级config，但是需要注意的地方就是新增的项有一些也是需要看自己配置做修改的。 关于这些设置具体是干嘛的不做过多阐述，自行查阅中文说明。OC中文手册","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC引导升级","slug":"OC引导升级","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E5%8D%87%E7%BA%A7/"},{"name":"黑苹果教程","slug":"黑苹果教程","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"华硕Prime B250-Plus魔改BIOS支持89代CPU","slug":"updateBIOSfor89","date":"2021-02-02T13:11:31.000Z","updated":"2021-05-09T13:11:37.563Z","comments":true,"path":"posts/10040.html","link":"","permalink":"https://goopher.tk/posts/10040.html","excerpt":"","text":"理论上也支持Prime B250M-Plus主板，未测试。首先需要将BIOS升级至最新的1205版本，下载地址 下载好后将其解压，将解压出来的CAP文件放置在U盘或者NTFS/EXFAT格式的硬盘中。重启电脑，看见华硕logo亮屏时连续点按F2或者del键进入BIOS，在BIOS界面按F7，找到easyflash进入，选择该CAP文件升级。注意升级过程中不要断电，不要做其他的操作，升级大约3—5分钟结束。 开始魔改准备一个U盘，将其格式化为Fat32格式，下载所需工具并解压。下载地址将解压出来的efi和bios fpt这两个文件夹复制到U盘中。重启电脑，看见亮屏时连续点按F8进入启动菜单，选择UEFI：xxx xxx为你U盘型号的这一项，进入GRUB。输入命令并回车解锁ME： setup_var 0x8E5 0x0 之后输入命令重启电脑： reboot 重启后连续点按F2/del进入BIOS设置，按F7进入高级设置，找到（advanced）——pch-fw configuration——me operation mode下选择temporary disabled，电脑会黑屏重启。进入系统后，打开bios fpt文件夹，找到FLASH.bat。右键，以管理员身份运行。等待BIOS刷入，看到fpt operation successful时，就说明刷入成功了。重启一下电脑，第一次机箱风扇会呼呼转两次，之后屏幕上提示按F1进入BIOS，更改一下自己需要改的设置再F10回车保存即可。 更换CPU区分B0步进和其他：看CPU上的两颗大电容，是横着的则为B0，可以直接上机。如果两颗大电容是竖着的则需要屏蔽触电，不屏蔽的话会烧坏针脚。这块主板理论上可以安装最高9700k，具体需要屏蔽的触点如果不理解建议问一下护舒宝的卖家。 BIOS刷死后的急救症状：开机后风扇一直转，灯亮，屏不亮。虽然华硕这块主板支持CrashFree BIOS 3，但是这玩意好像就只存在于传说中，急救还是得使用编程器，所以有一些麻烦。建议使用支持直接写入CAP的，然后使用华硕的SPI线，这样方便一些。编程器接线，注意这个不能接错，要不然可能导致BIOS芯片烧毁。SPI线的1234针脚是对应锁定杆那一边的。标白那一端与主板上的针脚对应。注意查看BIOS芯片型号，在刷写软件中手动选择。之后先点 读出 识别出BIOS芯片里原有的内容，再点击擦除，清空BIOS芯片。之后再点击读出，看一下所有数据都是FF 则擦除完成，再点击打开，打开BIOS文件，点击写入，写入完成后即可拔掉编程器，不需要校验。最后附上这个刷写软件和驱动点击下载 注意安装驱动时需要禁用签名。","categories":[{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/categories/BIOS%E9%AD%94%E6%94%B9/"}],"tags":[{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/tags/BIOS%E9%AD%94%E6%94%B9/"},{"name":"教程","slug":"教程","permalink":"https://goopher.tk/tags/%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"使用Hexo+Next主题搭建Blog","slug":"usethemenext","date":"2021-01-27T14:09:31.000Z","updated":"2021-05-09T13:11:37.566Z","comments":true,"path":"posts/6096.html","link":"","permalink":"https://goopher.tk/posts/6096.html","excerpt":"","text":"前言之前试过了很多Hexo主题，但是都不太合胃口，就又又又转回了Next这种简单简约的主题。我的博客搭建在GitHub上，使用Vercel加速，完全白嫖真的快乐。 新建博客hexo init 博客主目录名 新建完成后，切换工作目录至博客的主目录中。 cd 博客主目录名 //mac or linux，win我不会。 安装Next主题。 npm install hexo-theme-next 使用WebStorm打开博客的目录。在博客根目录新建一个文件名为_config.next.yml的文件，该文件就是主题的配置文件。打开node_modules文件夹，找到安装好的主题，打开里面的_config.yml配置文件，将里面的内容全选复制到_config.next.yml文件中保存。 开始配置打开根目录下的_config.yml配置文件，配置博客名，作者，时区等。 # Site title: //博客名 subtitle: //博客副标题 description: //描述 keywords: //关键字 author: //作者 language: //语言 timezone: //时区 修改域名等。 # URL ## If your site is put in a subdirectory, set url as &#39;http://example.com/child&#39; and root as &#39;/child/&#39; url: http://example.com //此处网址修改为自己的 root: / //博客根目录，一般不修改 启用next主题。 theme: next 配置git参数。 deploy: type: git repo: https://github.com/GOOPHER97/Goopher97.github.io.git //此处修改为你自己的 branch: master 配置主题打开_config.next.yml文件，搜索menu，配置导航栏。需要哪个删除前面的#即可，注意#删除后要加一个空格。举例： menu: home: / || fa fa-home 搜索creative_commons配置创作共用许可。 creative_commons: license: by-nc-nd //署名-非商业用途-禁止演绎,其他的自己查。 sidebar: true post: true language: zh-CN 启用JS,CSS压缩。 minify: true 配置布局样式。 # Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini //去掉前面#号为启用 启用黑色模式 darkmode: true 设置社交链接，注意要有个空格。 social: GitHub: https://github.com/Goopher97 || fab fa-github E-Mail: mailto:1520396767@qq.com || fa fa-envelope 启用pjax局部刷新。 pjax: true 启用懒加载，适合多图。 lazyload: true 启用代码块复制按钮。 copy_button: enable: true show_result: true 配置Gitalk,需要自己去注册。 gitalk: enable: true github_id: repo: client_id: client_secret: admin_user: distraction_free_mode: true # Facebook-like distraction free mode # Gitalk&#39;s display language depends on user&#39;s browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: zh-CN 启用搜索。 local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: true 安装搜索插件。 npm install hexo-generator-searchdb --save 在根目录的配置文件_config.yml中加入搜索配置。 search: path: search.xml field: post format: html limit: 10000 创建about等页面。 hexo new page about 同时要记得修改对应md文件。 --- title: 关于 date: 2021-01-27 23:26:40 type: about --- 为Next-v8.2.0主题添加友链页面在_config.next.yml配置文件中的menu下添加友链选项。 menu: xxxx links: /links/ || fa fa-heartbeat 修改主题文件夹中的语言配置文件node_models/hexo-theme-next/languages/zh-CN.yml。 menu: links: 友链 下载我写好的links.njk文件，放置在node_models/hexo-theme-next/layout/目录下。下载地址： 点击前往记得解压。。。修改同目录下的page.njk文件，在 &#123;%- elif page.type === 'tags' and not page.title %&#125; &#123;&#123;- __('title.tag') + page_title_suffix &#125;&#125; 下一行插入： &#123;%- elif page.type === 'links' and not page.title %&#125; &#123;&#123;- __('title.links') + page_title_suffix &#125;&#125; 之后在 &#123;% elif page.type === 'categories' %&#125; &#123;%- include '_partials/page/categories.njk' -%&#125; 下一行插入： &#123;% elif page.type === 'links' %&#125; &#123;% include 'links.njk' %&#125; 引入links.njk文件。新建友链页面。 hexo new page links 修改md文件。 --- title: 友链 date: 2021-01-28 00:02:39 type: links --- 在_config.next.yml文件中加入友链配置。 mylinks: - nickname: GOOPHER&#39;s Blog #友链名称 avatar: https://cdn.jsdelivr.net/gh/Goopher97/tuchuang@master/img/IMG_2199.JPG #友链头像 site: https://goopher97-github-io.vercel.app #友链地址 info: 记录折腾的生活。 #友链说明 查看效果。 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 其他开启赞赏。 reward_settings: enable: true reward: wechatpay: /images/wechatpay.png alipay: /images/alipay.png 添加站点地图：在_config.yml中添加： # sitemap sitemap: path: sitemap.xml 安装插件。 npm install hexo-generator-sitemap --save neat压缩css,js。 npm install hexo-neat --save 在_config.yml中添加： # hexo-neat # md博文压缩 neat_enable: true # 压缩html（ejs，swig等也属于html格式片段） neat_html: enable: true exclude: # 压缩css neat_css: enable: true exclude: - &#39;*.min.css&#39; - &#39;**/*.min.css&#39; - &#39;jquery.fancybox.min.css&#39; - &#39;**/live2d-widget/waifu.css&#39; # 压缩js neat_js: enable: true mangle: true #打印日志 output: compress: exclude: #排除文件 - &#39;*.min.js&#39; - &#39;**/*.min.js&#39; - &#39;jquery.fancybox.min.js&#39; - &#39;**/live2d-widget/*.js&#39; - &#39;**/live2d-widget/*.min.js&#39; 安装hexo-deployer-git。 npm install --save hexo-deployer-git 开启阅读进度百分比。 scrollpercent: true 修改圆角，在\\source\\css_variables\\Gemini.styl文件中添加： // 修改主题页面布局为圆角 $border-radius-inner = 15px 15px 15px 15px; $border-radius = 15px;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/tags/Hexo/"},{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Next","slug":"Next","permalink":"https://goopher.tk/tags/Next/"},{"name":"Blog","slug":"Blog","permalink":"https://goopher.tk/tags/Blog/"}],"author":"GOOPHER"},{"title":"使用AppleALC快速仿冒声卡驱动","slug":"useapplealc","date":"2020-12-29T11:08:31.000Z","updated":"2021-05-09T13:11:37.565Z","comments":true,"path":"posts/22869.html","link":"","permalink":"https://goopher.tk/posts/22869.html","excerpt":"","text":"所需下载：AppleALC：点击下载LiLu：点击下载Clover Configurator（旧版，适用于未r5120之前的版本）：点击下载Clover Configurator（适用于OpenClover）：点击下载OpenCore Configurator：点击下载 首先需要确定声卡型号在windows系统中打开Aida64查看or查看设备管理器里声卡的硬件ID。确定好声卡型号之后，点击打开 该网站，找到自己的型号点击进去。以我的声卡为例，型号是ALC887。在layout后面的数字就是ID，每个型号的声卡都会有很多个ID，具体是哪一个，参看紧跟后面的注释。可以看到我的主板的声卡ID为50，当然，不是每个人的设备都会这么轻松，在后面注释中没有找到自己设备的，就需要每个ID都试一下。 驱动声卡将applealc.kext、lilu.kext放到引导的对应文件夹中，打开config配置文件，注入ID：OC：方法一：在NVRAM-7开头-注入启动参数 alcid=50 50改成你自己的ID即可。方法二：在设备属性设置中注入，参看OC简要配置说明（旧）已修正Clover:在设备设置，Audio下填写ID即可。 最后：每次注入完ID重启，打开系统偏好设置-声音-输出，切换输出看有无声音。要是输出里是空的，那就需要换下一个ID注入重启再试。声音输出不正常，爆音，也更换ID重启再试。试了多个ID无果先查看AppleAlc驱动是否加载了。主流设备一般都没有问题，另外使用过voodoohda那就先删除万能声卡驱动，重装一次系统再试。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果教程","slug":"黑苹果教程","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/"},{"name":"声卡","slug":"声卡","permalink":"https://goopher.tk/tags/%E5%A3%B0%E5%8D%A1/"},{"name":"AppleALC","slug":"AppleALC","permalink":"https://goopher.tk/tags/AppleALC/"}],"author":"GOOPHER"},{"title":"OC简要配置说明（旧）已修正","slug":"OCjianyaopeizhishuom","date":"2020-12-27T13:22:31.000Z","updated":"2021-05-09T13:11:37.556Z","comments":true,"path":"posts/4815.html","link":"","permalink":"https://goopher.tk/posts/4815.html","excerpt":"","text":"注意事项：OC对于有依赖的SSDT/KEXT加载顺序有严格要求，注意在config配置中的顺序。主要适用于UEFI启动的电脑。本文当前写作时OC正式版为0.5.9，0.6.0测试版。以下的配置适用于这两个版本，后续OC的更新可能会有些许改动，到时候应该再参考官方文档进行修改。 第一小节，OC目录结构的简要说明我们从GitHub或者其他地方下载到OpenCore之后解压，会得到如下三个文件夹：其中第一个Docs里面有当前版本的英文说明和config配置示例文件（Sample.plist和SampleFull.plist），我们主要使用其中之一并将其重命名为config.plist作为OC的配置文件。我们主要使用的是EFI文件夹的内容。在EFI文件夹中有BOOT和OC两个子文件夹，我们接下来的配置也主要在OC文件夹中进行。如下图所示： ★我的OC配置五步曲：第一步将前面Docs文件夹中的Sample.plist文件重命名为config.plist并拷贝到OC文件夹中；第二步在Kexts文件夹中放入所需要的Kext驱动；第三步在Drivers文件夹中放入补充性的efi驱动；第四部在ACPI文件夹中放入SSDT；第五部编辑配置config文件。 接下来将以我的电脑为例，带大家一步步配置OC，吃上黑苹果。我电脑的配置如下：（X86组装机）CPU：i5 7500主板：华硕Prime B250 Plus（支持原生NVRAM，原生电源管理等）硬盘：西数SN750 1T 西数机械黑盘 1T显卡：蓝宝石RX580超白金4G内存：金士顿骇客神条DDR4 2400 8G*4显示器：优派VX2478-4K-HD（支持MAC模式，默认自动开启HIDPI）电源：振华750W（方便日后升级）键盘：客制化GK61 81键热插拔机械键盘Cherry轴鼠标：ROG GLADIUS II CORE主板自带声卡：ALC887 （通过查询可知仿冒ID为50）主板自带网卡：RTL8111H无线网卡：白果拆机BCM943602CS三天线（2.4GWi-Fi与蓝牙干扰严重，我日常使用5GWi-Fi和蓝牙没有问题，支持接力隔空等功能） 了解完电脑的配置，接下来还需要对BIOS进行如下设置：关闭：CSM兼容模块 快速启动 串口 VT-d CFG-LOCK RC6节能（在核显设置那）开启：核显 VT-x 大于4G地址空间解码设置系统类型为other 核显显存为64M（主要是之前使用核显的时候驱动方便，如果只作加速使用设置多大是无所谓的）首选显卡Auto（自动模式）注意电脑之间存在差别，设置BIOS的时候要灵活处理。接着我们对OC继续配置，在Kexts文件夹中放入所需要的Kext驱动：说明：RealtekRTL8111.kext为主板自带网卡的驱动。WhateverGreen.kext为显卡所需要的驱动。USBInjectAll.kext为USB所需要的驱动。AppleALC.kext为声卡驱动。VirtualSMC.kext为仿冒SMC的驱动。Lilu.kext为依赖性驱动。了解每个驱动的作用是重要的一步，能避免放置多余/错误的驱动导致额外的问题。 在Drivers文件夹中放入补充性的efi驱动：目前我只在其中补充性得放入了HFSPlus.efi，这个从Clover那边嫖一个过来就行。（大概是用来识别HFS文件系统的，也就是识别macOS安装盘的时候会用上。关于APFS文件系统，OC目前自带的已经可以识别只是需要开启，后续编辑和配置config的时候会讲到。）在ACPI文件夹中放入SSDT：这一步所需要用到的工具：maciasl（群文件）需要用到的辅助文件OC-little（GitHub，群文件均有下载）最好是先提取一份原机未修改的DSDT，提取的方法有很多种，我是使用的Clover进行提取的。在Clover引导界面按下F4稍等一会儿，过程中没有提示，大概多等个十几秒就可以了，重启挂载EFI后便可在Clover的ACPI文件夹下的origin文件夹中看到。我们使用maciasl打开原机提取的DSDT.aml这个文件，之后参考OC-little中的02-仿冒设备中的第一个仿冒EC。通过阅读README.md说明文档，我们得知，需要在DSDT中搜索PNP0C09这个关键词。查询之后发现我的机器EC名称不是直接叫EC，而是叫H_EC。正常情况下应该是要使用到该补丁了，但是继续阅读DSDT发现，我这个机器关于EC的返回为：Return (Zero)，则略过了这一步，跳到下一阶段。我们打开OC-little的05-注入设备，进入第一个文件夹注入X86，注入X86主要为了实现CPU的电源管理。通过阅读README.md说明文档可知，我们需要在DSDT中搜索Processor关键词。对比说明文档可知，我的电脑属于第一种情况，则使用SSDT-PLUG-_PR.CPU0.dsl文件，用maciasl打开后编译，另存为SSDT-PLUG.aml文件放入到OC对应文件夹。接下来是弄一个SSDT-PMC.aml或者SSDT-APMC.aml来实现节能五项，直接嫖就可以了。要是一个不好用就换另外一个即可，把maciasl软件打开新建一个，然后复制内容进去保存为aml文件就好了。PS：此处SSDT-APMC已修正为SSDT-PMCR，具体请查看《从无到有配置OC引导》中后续完善部分。至此对于这部分已经基本结束，台式机嘛，弄的东西少点。如果你是笔记本，你还需要参照OC-little制作电池补丁等等，这些东西已经基本成熟，只要认真阅读说明文档，基本不会有什么问题。我对我这里的没有讲到的几个说一下，SSDT-DTGP.aml和SSDT-GRAPHICS.aml这两个文件是我从论坛嫖来的，主要用来给RX580注入白果的显卡信息，伪装成白果580X显卡。剩下的一个文件SSDT-UIAC.aml，这个是我用来定义USB接口的，为什么这里不讲怎么弄这个，主要是因为不建议大家使用ACPI定制USB端口，强烈建议大家先试试用Hackintool工具定制。如果说，你像我一样，使用Hackintool工具定制后容易出现别的问题，譬如我的，睡眠后蓝牙会挂掉。在考虑使用ACPI定制USB口。关于这一个部分的内容，OC-little中亦有详细的说明。PS：此处我已改用USBPorts.kext，具体请查看《从无到有配置OC引导》中后续完善部分。重要说明：以上制作的SSDT中并没有添加一个操作系统类型的判断，如果说你跟我一样是macOS单系统用户便可以不加。假如你还需要使用OC来引导你的Windows系统实现双系统或者多系统，那么你就必须加入判断操作系统的语句，因为OC并不像Clover那样，它会傻傻得把你的SSDT也给Windows或是其他系统加载上，这样就会导致Windows和其他系统出现异常，这一点上感觉Clover会方便很多。判断系统类型基本语句If (_OSI(“Darwin”))，macOS系统内核名称Darwin，所以我们DSDT中判断语句是写Darwin而不是写macOS。与Kext驱动一样，我们应该对我们自己放进去的SSDT心中有数，明白其作用，不要什么都瞎往里面塞，我认为一个好的引导配置应该紧贴机器配置，精简但功能齐全。接下来就需要编辑配置config文件了：所需要到的工具：OpenCore Configurator（注意这个只是用做参考，不要用它来编辑config，有时候它会破坏config的结构。）ProperTree（推荐！轻量化。）Xcode（选用，安装包太大了，感觉没必要。）Hackintool（黑苹果的瑞士军刀）Clover Configurator（用来摇三码的，OCC也可以摇，但是没CC好用。）在使用OpenCore Configurator请注意对应OC引导版本。用ProperTree打开EFI/OC/config.plist配置文件，并将所有下拉收回，可得到如下：上边的WARNING我个人觉得没啥好看的，直接进入正题，我们可以看到config主要分为了8个块。其中对应的内容如下： ACPI：这里的话主要是用来配置SSDT的，其中又有4个子集，分别为Add Delete Patch Quirks。我们主要用到的是Add（添加）这一项，其下面子集中需要我们自行填写我们放入的SSDT的信息，如上图所示。结合之前，我的配置中我使用了5个SSDT文件，则需要0-4子集（它的计数是从0开始的）。我们将SSDT的文件名填入到Path一项后面对应的位置，如上所示，并且将Enabled后对应的填为True（表示启用这个SSDT）。在Comment一项对应的是填写这个SSDT的备注，可以写写它是干什么的，也可以不写，为方便后期维护我建议还是将用途写清楚标明白，直观上一眼就能看出来。我们每个人机器配置不同，所需要的SSDT数量也不同，这样就可能0-4不够用或者多几个的情况。我比较野，大家也可以学我这样做，直接选中0-4其中之一，然后键盘com+c复制，再选中一下Add，再按com+v粘贴，之后修改其内容即可。如果多了，需要删除的，先选中要删除的那个，然后鼠标右键，Remove删除完事。重要：对于有依赖的SSDT，OC这里的配置有严格的顺序要求，比如我这里有注入白果显卡信息的SSDT两个，其要求为DTGP在之前就要加载。我们就要把它放在前面，这一点我感觉还是Clover省心一点。关于其他的SSDT的顺序要求，在OC-little中有很详细的说明，大家仔细阅读就可以搞定了。之后是Delete，如字面意思一样，禁用一些SSDT，个人觉得没啥用，不需要配置这里。再往下是Patch，这里是热补丁设置。我自己的机器倒是没有用得上这个，不过还是给大家提供两个：1.在10.15中，一些资料指出我们需要把EC控制器(EC0)改名为EC来确保能进入10.15系统： Comment: EC0 to EC Count:0 Enabled:YES Find:&lt;4543305F&gt; Limit:0 Mask:&lt;&gt; OemTable:&lt;&gt; Replace:&lt;45435F5F&gt; ReplaceMask:&lt;&gt; Skip:0 TableLength:0 TableSignature:&lt;&gt; 需要注意的是EC的这个名称，前面我就有讲到了在原始DSDT中搜索关键词PNP0C09来获取EC控制器的名称。2.华擎、华硕、微星主板可能会遇到RTC问题而无法进入系统，这同样需要添加hotpatch补丁来解决： Comment: RTC fix Count:0 Enabled:YES Find:&lt;A00A9353 54415301&gt; Limit:0 Mask:&lt;&gt; OemTable:&lt;&gt; Replace:&lt;A00A910A FF0BFFFF&gt; ReplaceMask:&lt;&gt; Skip:0 TableLength:0 TableSignature:&lt;&gt; 往下走是Quirks，里面的东西感觉都用不上，我全部选的False，如果你有需要，改为True启用即可。FadtEnableReset：一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）。NormalizeHeaders：清理ACPI头，一些主板的ACPI表需要打开这个修复启动。RebaseRegions：换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开。ResetHwSig：休眠相关项，台式机不需要。ResetLogoStatus：重置logo什么的？感觉没啥用。 Booter：主要是一些内存的相关设置。MmioWhitelist：默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。这个我的电脑用不上，就不设置了。你们需要用到的就把Enabled对应的False改为True启用就好了。接下来是Quirks，OC这个每项下面都有个Quirks，应该是搞了一些奇奇怪怪的难以分类的玩意，理解为补充性的功能就好了，需要就启用，不需要就禁用。另外说明一下此项与OpenRuntime.efi有关。在aptiomemoryfix停更后，此补丁已经更名为Openruntime, 并将一些功能与OC合并、模块化。对于无法原生nvram的主板来说，这里的选项需要格外注意。当然我也会把像300系列、x299、c422这样支持原生nvram的选择方法一并写进去（这个OpenRuntime是什么，不要急往下看着走）。AvoidRuntimeDefrag：大部分UEFI都会写入时间、电源管理等信息，这个所有黑苹果主板都应该选择True启用它。DevirtualiseMmio：内存注入方式包括KASLR方式(分布式注射到各个内存地址中）以及连续性方式。在使用KASLR时，PCIE加载到内存，可能会占据所有avaliable值而导致OC的内核以及内核缓存无法注入，导致启动失败。此项目前建议选择True，并且在下一项ProtectUefiServices中也选择True。备注：KASLR是更加高效的内存注入方式，但不代表每台机器都能使用这种方案，这里我提供两种关于内存的设置：1：DevirtualiseMmio选择True, ProtectUefiServices选择True 并删除NVRAM-Add-7C开头下面的boot-args（启动参数）里面的slide=1,以及删除Drivers文件夹下的Memoryallocations.efi。即开启KASLR内存注入方式。（这里我选用方式一）2：DevirtualiseMmio选择True, ProtectUefiServices选择False保留NVRAM-Add-7C开头下面的boot-args（启动参数）里面的slide=1,以及保留Drivers文件夹下的Memoryallocations.efi文件。即开启连续性内存注入方式。（找不到启动参数？别急，下面会讲到的。）DisableSingleUser：是否开启单用户，我觉得我不用，我选False。DisableVariableWrite：非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此我们要禁止此项来防止其他程序对nvram进行写入。简单说，就是主板支持原生NVRAM选False就好了。DiscardHibernateMap：当电脑从休眠(hibernation)中唤醒时,硬盘里的资料会恢复到内存中去，但这个时候OC的内核以及内核缓存等也会写入，这样可能导致冲突，这个选项是帮助我们解决这个问题的。而目前来看，除了原生NVRAM都无法进行休眠（注意睡眠sleep和休眠hibernation是两个概念），台式机的话就更不需要休眠功能了，这里我选择False。EnableSafeModeSlide：安全模式下是否启用连续性的内存注入方式。我选择True，与正常情况下保持一致。EnableWriteUnprotector：保证nvram能正常写入而不受到UEFI内的一些服务的影响，无论什么主板都建议要选择True。ForceExitBootServices：这个选项是让那些非常老旧的主板也能使用内存寻址，正常情况下选False。ProtectMemoryRegions：官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择False，其实我也不明白。ProtectSecureBoot：保护uefi安全启动被写入，我选择True。ProtectUefiServices：解决Z390系列主板卡开机卡++++的问题，这个与memoryallocation.efi功能类似。ProvideCustomSlide：此选项执行固件的内存映射分析并检查所有的 slide 值(1 – 255)是否可用。由于 boot.efi 生成的这个值是利用 rdrand 指令随机生成的或者伪随机指令 rdtsc 随机生成的，因此当其选择了 一个冲突的 slide 值时有可能启动失败。由于这种潜在的冲突存在，此选项强制 macOS 在可用的值中使用一个伪随机值，这也确保了 slide= 启动参数不会因为安全原因传递给操作系统。是否需要此选项由信息 OCABC (Only N/256 slide values are usable!) 是否存在于调试日 志中决定。如果存在此信息，则需要启用此 Quriks 选项。我选择False。如果你对KASLR有一定的认知并会运用，请注意这个值。RebuildAppleMemoryMap：重新生成内存地图来匹配苹果系统。苹果的内核有很多缺陷，比如单张的内存地图不能超过4K，一旦超过就可能无法开机；又比如一些硬件会直接把读写权限写进内存里，而苹果却不能给与写入权限。如果你遇到此类的问题，请尝试开启它。注意此项目与EnableWriteUnprotector存在冲突关系，确保开启这个的时候，另一个是关闭的。另外，此项又需要与SyncRuntimePermissions项搭配使用。一般情况下请选择False。SetupVirtualMap：是否建立虚拟内存并对物理内存进行映射。我们在开机时，OC的程序需要一块连续性的内存进行存放内核等东西，而实际的物理内存一般都是分散的。因此，我们通过虚拟内存建立连续性内存供OC使用，并映射到分散的物理内存中。这里我们选择True。SignalAppleOS：通知同一台电脑上的设备mac上的硬件选择，此项应该是给白苹果用的。如果你的mac开启了核显，但是win下核显不能开启，请打开。我选择False。SyncRuntimePermissions：修正硬件在注入内存时无法注入权限的问题。一般此类问题存在2018年后的主板。一般我们选择False。 DeviceProperties：主要用来注入用的，比如注入声卡ID，核显ID。以我自己电脑为例，我需要注入一个声卡ID50，核显的话我只是开启作加速用，实际测试注不注入这个加速ID我的核显都可以实现加速，应该是whatevergreen自动注入了，这里就偷个懒，只注入声卡ID。OC这个注入有点麻烦，我们需要借助Hackintool这个工具。打开Hackintool，点击到PCIE一项，找到我们的声卡，复制下设备地址，再把这个地址填写到Add下。下面以我的为例：找到声卡的设备地址为PciRoot(0x0)/Pci(0x1F,0x3)，复制到Add下，然后layout-id对应的Type类型改为Number（数字），再在后面填写上对应的ID 50。需要注意的是这里的这个Type类型，默认不是Number的要记得改。然后这个声卡的设备名一般是叫做HDEF或者HDAS，我这个就是叫HDEF，一眼就找到了。对于用核显输出的，我这里就不讲了，真的太多了，建议大家到XJN的博客看看。接下来是Delete，这个是禁用一些设备的，个人感觉没有用，不对其修改了。 Kernel：如字面意思，内核相关的设置。Kext驱动也是在这里设置。第一项Add参考ACPI的Add不同的只是这里填的是kext驱动了，需要注意的点：BundlePath对应填写kext驱动的名称；Enable对应True才启用这个驱动；ExecutablePath这一项填写的是二进制文件路径，PlistPath这个是plist文件路径，ExecutablePath和PlistPath不会填写的，打开OpenCore Configurator，点击kernel内核设置一项，把驱动拖进去看看再填写。注意不要使用OCC直接编辑config，会炸。MaxKernel和MinKernel是最大/最小内核，这个一般不做设置。注意Kext驱动之间也是存在依赖性的，比如Lilu.kext这个就要放到前面。接下来是Block，这里是禁用kext的好像，没啥用。接下来是Emulate，此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，我们这里不做此方面讨论（我没这么老的CPU）。所有选项按默认即可。接下来是Patch，这里是给kext打补丁用的。我们可以看到样本里面有四个补丁，都是关闭着的，其中有两个是关于APPLE RTC的，这对于华硕主板来说相对比较重要，这里我们需要对appleRTC相关的两个补丁一一测试，打开—–Enabled—YES其中一个，即可。如果不行，关闭一个打开另一个。这样能解决华硕主板重启丢失BIOS设置以及需要按F1跳过安全模式。如上图我这个华硕主板，启用了第一个AppleRTC补丁。接下来是Quirks：这里的这些我感觉就后边三个有点用，PowerTimeoutKernelPanic：10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，我没有这个问题选择False。ThirdPartyDrives：开启Sata类SSD的trim功能，我没有sata类的ssd，我选择False。XhciPortLimit：解除15口限制的，这个比较有用。但是我对USB定制过了，此项我选False。 Misc：开机引导设置的。BlessOverride：这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。Boot：ConsoleAttributes: 设置开机选择界面的颜色，默认直接填0。使用方法为填入字体颜色和背景颜色的值的16进制之和例如蓝色字（0x01)+红色背景（0x40)=0x41。HibernateMode: 检测休眠模式。我们的机器一般都不支持休眠，选none。如果你的主板支持原生nvram、并想测试休眠，可以考虑填auto。HideAuxiliary:在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择False。PickerAttributes:当你使用OC主题时，你可以通过计算以下数值之和来配合使用OC主题，OC主题至今还在测试阶段，默认填0。PickerAudioAssist：是否开启开机朗读文字功能，一般选择False。PickerMode: 是否使用OC的开机启动盘选项，如果我们填Builtin就是不使用任何主题；如果我们填External就会调用第三方主题。这些主题设置什么的，我感觉用不上，花里胡哨。PollAppleHotKeys:是否开启一些热键功能，包括Cmd+K;Cmd+S。我选的是True。如果你开机发现键盘无法选择，选False。ShowPicker: 是否显示开机启动盘选项，比如MAC,WINDOWS那些。我们选择True。后期配置成熟稳定后可以将此项改为False，快速进入系统，效果类似于Clover的Fast。TakeoffDelay:开机热键延时，如果你按热键老是老不急按，你可以设置5000到10000之间的值让你有更多时间按热键。Timeout: 倒计时进入指定硬盘，这里我们按需求填写，我填写5，代表5秒钟进入指定硬盘。接下来是Debug，这个我们用不上，不用管它。Entries：这里是帮助我们添加一些你希望的引导路径。我用不上，没做设置。Security：AllowNvramReset: 是否在开机引导项中加入重置nvram缓存功能的选项，我选True。AllowSetDefault:选择True后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘。AuthRestart：filevault相关项，选择False。BootProtect：请填写Bootstrap。此选项能保证OPENCORE.EFI的永久性而免遭到其他操作系统对开机顺位的破坏。说人话就是OC会自己创建一个名字叫OpenCore的启动项，并保持顺序在BIOS中的第一位。个人觉得还是挺好的，建议设置。ExposeSensitiveData: 因为要使用到模拟nvram，这个数值我们必须填3。如果我们是原生nvram，填写2。HaltLevel: 按默认设置即可。ScanPolicy: 这个大概是扫描文件系统的，我建议设置成17760515 0，自动扫描。Vault: 黑苹果的vault加密方式，我们不需要这个功能，填Optional。下一个是Tool工具，感觉没啥用，有点用的重置NVRAM在OC默认就放最后一个了。 ★NVRAM：这里主要是设置启动参数之类的。如图我的配置中，Add下面第一个4D144D..下面对应的是我开启了启动时的Hidpi，让启动过程中苹果logo大小保持一致。下面的7C436110..这个下面对应的boot-args这一项就是填启动参数的。更详细的讲解： 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 UIScale Data &lt;02&gt; //这里填写01为普通的UI显示模式，02为开启HIDPI的UI显示模式，我选择02 DefaultBackgroundColor Data &lt;00000000&gt; //默认开机背景色为黑色 7C436110-AB2A-4BBB-A880-FE41995C9F82 boot-args String Slide=1 darkwake=0 -v //slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v bootercfg String log=0 debug=0 level=0 //这条自己添加进去，是关闭开机时的代码的。 csr-active-config Data &lt;e7030000&gt; //关闭SIP保护 nvda_drv Data &lt;31&gt; //对10.13系统之前的N卡的相关设置。 prev-lang:kbd Data &lt;7a68 2d48 616e 733a 3235 32&gt; //语言设置相关，记得改成这个，这个是中文 接下来是Delete，这个是禁用设置的，没啥用。LegacyEnable：如果你的主板不支持原生NVRAM，请一定要选择True，如果你的主板支持原生nvram的，填False。LegacyOverwrite：写入覆盖什么的，直接False吧。LegacySchema：这里是nvram的变量设置，大部分默认已经填好，我感觉够了。WriteFlash：如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择False。不过你要是跟我一样想要使用启动磁盘设置的，则True启用它。 PlatformInfo：这里设置的是机型，我们可以用Clover Configurator，摇一个三码然后对应信息填入。在选取机型的时候，我们应该综合考虑，选取一个配置接近的机型为佳。我的配置综合考虑之后选择了iMac18，2 。摇好之后对应填入即可。DataHub PlatformNVRAM SMBIOS这三项非必须的，可以不填。这里第一项Automatic是自动填充，我开启它，让他自己补全不重要的信息，省事。剩下的UpdateDataHub UpdateNVRAM UpdateSMBIOS UpdateSMBIOSMode这几项照着我的设置就好了。 UEFI：填写一些UEFI相关的设置。★APFS：这个部分如果设置不好会导致OC识别不了安装好的系统，建议参考我的设置。EnableJumpstart: 从APFS容器中加载内置APFS驱动，建议开启True。此选项仍然依据你的Scanpolicy来做出决定，请确保在Scanpolicy中放开APFS格式。HideVerbose：是否隐藏啰嗦模式，一般我们需要看日志的时候才开启，所以我们选择隐藏，选择True。JumpstartHotPlug：是否加载APFS格式的热插设备，一般我们选择True。MinDate：加载最低发行的APFS格式。一些旧的apfs可能会危害电脑，我们填0。如果你想加载旧的发行日期的APFS格式硬盘，请填-1。MinVersion：加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。填-1代表所有版本，建议填0。Audio：这个主要是设置开机时候duang一下那个开机音的，我没搞。ConnectDrivers：是否加载补丁，选True。★Drivers：设置加载efi驱动的。这个看需要吧，我设置加载的这三个也算是比较基础的。Input：这个主要是原生Apple开机热键的设置，我默认，没改过。Output：ClearScreenOnModeSwitch:消除开机时从图形模式转换到文本时出现残影的问题，如果没有这个问题我们选择False。ConsoleMode:这里填主机的输出方式，一般情况下填MAX，或者留空DirectGopRendering:是否使用内置显卡直接渲染开机画面，建议选择False。IgnoreTextInGraphics: 修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题。如果有这种情况选择True，一般我们选择False。ProvideConsoleGop:调用显卡gop，我选择True。ReconnectOnResChange: 一些固件在 GOP 分辨率改变后会重新连接显示器才能输出，一般情况下选择False。ReplaceTabWithSpace:一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。一般我们选择False。Resolution:开机分辨率。比如我的显示器是4K、16：9的，我就填写3840×2160。这个你根据情况填写或者不填。SanitiseClearScreen: 修复4k及以上显示器的输出问题，选择True。TextRenderer:OC开机代码字体渲染方式，我这里填BuiltinGraphics。ProtocolOverrides：AppleAudio: 如果你想要开启如同白苹果一样的开机DUANG的声音等，请开启它，并且还需要配合UEFI—-Audio的正确设置。AppleBootPolicy: 虚拟机的mac需要用的，我们选择False。AppleDebugLog:重新安装苹果错误日志界面，一般选择False。AppleEvent: 虚拟机并具有vault的mac需要用的，我们选择False。AppleImageConversion: 重建apple图标，选择False。AppleKeyMap: 重建苹果功能键，选择False。AppleRtcRam：重装applertc协议。一般选择False。AppleSmcIo:代替之前的VirtualSMC.efi,请选择TrueAppleUserInterfaceTheme: 重新安装 Apple User Interface Theme 协议，选择False。DataHub:重建datahub，这里我们选False。DeviceProperties: 虚拟机或者老款的电脑需要选择True才能注入device property，我选False。如果你发现你注入device property无效，请选择True。FirmwareVolume: VAULT相关项，我选False。HashServices: VAULT相关项，我选False。OSInfo: 通知主板以及一些程序关于MAC引导的信息，一般情况选择False。UnicodeCollation: 旧的主板需要，我们选False。Quirks：DeduplicateBootOrder：当RequestBootVarRouting选项为开启时，一些其他的操作系统（e.g.windows)可能在某些主板(e.g.ASUS)中会找不到自己的引导而重新创建,最终导致黑果在没有清理NVRAM的情况下是无法进入系统的，请选择True。ExitBootServicesDelay:旧主板需要给予主板退出时间（单位为微秒），较新的主板直接填0。旧的主板比如Z87pro，填3000000-5000000。IgnoreInvalidFlexRatio：如果你没有在bios中解锁MSR0x194，一定要选True。ReleaseUsbOwnership:大部分的主板都有自动释放USB所有权的功能，我们选False。如果你开机键盘鼠标卡死了，或者USB失灵，试试选True。RequestBootVarRouting: 增加”启动磁盘” 的可靠性，这里选择True。TscSyncTimeout：帮助一些X99 X299的主板开启全核同步功能。此选项旨在代替TSCAdjustReset.kext等类似补丁，推荐的值是500000。但是此选项并不能在睡眠唤醒后生效，所以请填写默认值0，并使用TSCAdjustReset.kext来做全核同步。UnblockFsConnect:惠普笔记本可能会让OC无法扫描到启动项，一般选择False，如果你是惠普笔记本，请选择True。ReservedMemory：此项为保留内存所用。一些硬件会把硬件EFI写进内存过程中占据必要的UEFI运行空间，所以我们可以通过此项来预留内存来保证UEFI的运行。填写方式可以参考小兵的文章。来寻找指定内存的起始位置，以4K为一个节点。一般情况下，此项我们并不需要理会，我这里没有设置。到这里我们就GET到了一个自己配置的OC，我建议，先找一个U盘，用黑果小兵提供的镜像做一个macOS的启动盘。然后，我们将U盘的EFI分区里的内容删除，并将我们配置好的OC放进去，先从U盘启动，做好调试，没有问题了再复制到硬盘，从硬盘启动。这个就是我做好的启动盘。目前在我自己电脑上使用的OC非常稳定。目前来说没有发现什么大的问题了，下面总结一下：要清楚自己配置时放进去的每一个SSDT、Kext驱动的作用，不要冗杂配置。Config配置文件编辑的时候，建议使用PT、Xcode，防止配置文件结构损坏。一个好的EFI引导要配置得精简干练，启动速度才快，亦更稳定。完成展示：","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"},{"name":"黑苹果教程","slug":"黑苹果教程","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/"}],"author":"GOOPHER"},{"title":"黑苹果BIOS相关设置","slug":"biosshezhi","date":"2020-12-27T08:41:31.000Z","updated":"2021-05-09T13:11:37.560Z","comments":true,"path":"posts/5204.html","link":"","permalink":"https://goopher.tk/posts/5204.html","excerpt":"","text":"据之前的文章配置好引导后，还需要设置BIOS才能安装macOS系统。此外如果BIOS中有XHCI handoff还需要将其打开。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果前的设置","slug":"黑苹果前的设置","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%89%8D%E7%9A%84%E8%AE%BE%E7%BD%AE/"}],"author":"GOOPHER"},{"title":"OpenCore和Clover引导更新","slug":"opencorecloveryindaogengxin","date":"2020-12-27T07:48:31.000Z","updated":"2021-05-09T13:11:37.563Z","comments":true,"path":"posts/6350.html","link":"","permalink":"https://goopher.tk/posts/6350.html","excerpt":"","text":"OpenCore引导更新:推荐使用OpenCore Configurator工具 [下载地址]OpenCore [下载地址]先挂载EFI，备份原有引导到U盘/别的地方，方便更新失败时恢复使用。打开旧引导的/EFI/OC/目录，按住command/win键多选上ACPI Kexts Resources及config.plist再按command/win键+c复制，到新引导的/EFI/OC/中command/win键+v粘贴覆盖。再到旧引导的/EFI/OC/Drivers/中复制HfsPlus.efi文件到新引导的对应目录下。PS：如果你有使用别的efi驱动也记得一同复制过去之后再用OpenCore Configurator（新版本的，版本号看软件上边。）打开新引导中的config.plist文件，按command/win键+s保存一下。注意config.plist文件中每次升级都会新增or删除一些选项，需要看情况修改好再保存我使用的是MOD版的OC，切换OpenCore Configurator版本在其偏好设置中。另外OpenCore Configurator工具通常在OC更新后一段时间才会更新，所以每次看到OC更新了也不要着急，先等OpenCore Configurator更新了再更新也不迟。如果你不愿意等，那推荐使用PlistEdit Pro软件，自行参考Sample.plist示例文件删除/增加相关参数。不知道示例文件是啥？[请看] Clover引导更新: Clover引导：点击下载 下载zip格式的U盘版即可。 注意Clover从r5120版本开始引入了OC以支持big sur 从此开始变了。 旧版本：复制CLOVERX64.efi文件粘贴覆盖完事。 新：需将ACPI kext先迁移到新引导的对应文件夹中，再选择需要用到的efi驱动（具体参看OC）从off文件夹中复制到UEFI文件夹中，再打开新的编辑器编辑config，配置Quirks（参看OC）。","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"OC引导更新","slug":"OC引导更新","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E6%9B%B4%E6%96%B0/"},{"name":"Clover引导更新","slug":"Clover引导更新","permalink":"https://goopher.tk/tags/Clover%E5%BC%95%E5%AF%BC%E6%9B%B4%E6%96%B0/"}],"author":"GOOPHER"},{"title":"从无到有配置OC引导","slug":"congwudaoyoupeizhiocyindao","date":"2020-12-25T15:45:31.000Z","updated":"2021-05-09T13:11:37.561Z","comments":true,"path":"posts/64658.html","link":"","permalink":"https://goopher.tk/posts/64658.html","excerpt":"","text":"相关阅读： OpenCore中文手册 OpenCore部件 Xjn大佬的博客 拓展阅读 示例配置： CPU i5 7500 主板 ASUS Prime B250-Plus 板载声卡 alc887 板载网卡 rtl8111H 内存 FURY 8GB DDR4 2400 x4 显卡 Sapphire Radeon NITRO+ RX 570 4G 硬盘 WDC SN750 无线网卡 BCM943602CS 显示器 VX2478-4K-HD 鲁大师截图 相关下载： macOS镜像：Big Sur Catalina Mojave High Sierra 来源于黑果小兵 写入工具Tranmac单文件破解版：点击下载 config编辑工具： (注意使用OpenCore Configurator要与OpenCore引导版本对应) OpenCore在线编辑器 优点：Mac/Win均适用，有网络就可以编辑，选项有中文提示。 注意：要使用对应版本的OpenCore引导。 PT for Win：点击下载 PlistEdit Pro（Mac）：点击下载 OpenCore Configurator（Mac）：点击下载 Maciasl（Mac）：点击下载 Hackintool（Mac）：点击下载 三码生成GenSMBIOS（Python）:点击下载 来源Github Python3.7（Win7及以上系统）：点击下载 macOS在线安装：点击下载 gibmacOS：点击下载 OpenCore引导：点击下载 正篇 下载OpenCore引导并解压，先简单了解OpenCore引导文件夹结构： 我们接下来需要用到的EFI在OpenCore-0/X64/目录下 在/EFI/OC/目录下主要有6个文件夹，一个OpenCore.efi（OC核心），缺少一个config.plist配置文件。 ACPI文件夹：用来存放DSDT/SSDT Bootstrap：OC引导项（后续手动添加OC引导项到BIOS时可以制定到该文件夹下的efi文件，也可以指定到/EFI/BOOT/下的efi文件） Drivers文件夹：用来放置efi驱动 Kexts文件夹：用来放置kext驱动 Resources文件夹：用来放置OC图形化主题、开机声音 Tools文件夹：存放工具（常用CleanNVRAM清除NVRAM中的数据，与ResetNVRAM重置不同。） 开始配置： 将/OpenCore-0/Docs/目录下的Sample.plist文件复制，粘贴到/EFI/OC/中并将其重命名为config.plist 之后下载所需的kext驱动用于驱动电脑硬件，绝大部分都能在GitHub上下载到。 VirtualSMC.kext 仿冒SMC，必须 Lilu.kext 依赖，必须 AppleALC.kext 声卡 绝大部分用这个就行了 WhateverGreen.kext 显卡 RealtekRTL8111.kext 有线网卡 不同型号的网卡需要不同的驱动 USBInjectall.kext USB 这个不是万金油 将这些都放入到/EFI/OC/Kexts/目录下 打开在线编辑器，上传config配置文件。注意提示框中的提示，该编辑器仅适用0.6.4版本！ 点击右上角的Open，选择/EFI/OC/config.plist文件上传。我们可以看到里面有一些预设，可以帮助我们减少一些操作。 点击左侧的Kernel，配置启用Kext驱动。 把我们之前放到/EFI/OC/Kexts/的驱动都添加上去，注意这里的顺序不能出错，Lilu-SMC-WEG-ALC-其他. 添加好后配置下面的Quirks,勾选XhciPortLimit去除USB限制。 点击左侧的Booter，配置下面的Quirks。 勾选AllowRelocationBlock 勾选DevirtualiseMmio 勾选ProtectSecureBoot 勾选ProtectUefiServices 取消ProvideCustomSlide 点击左侧NVRAM，选择4D1ED开头的，将右侧对应的UIScale的值从01改为02，用于开启引导第一屏时的hidpi。 选择7C43开头的，将右侧对应的boot-args（启动参数）的值修改为alcid=50（注入声卡ID）。常用引导参数-v （开启跑码除错，我不需要除错，建议你们先保留-v参数🤫）。修改prev-lang:kbd的值为7A682D48 616E743A 2D313638 3939 此项设置为语言设置， 默认为俄语，所以建议都修改。 点击左侧Platforminfo，配置机型相关参数。下载GenSMBIOS、Python （Win系统默认不自带要自己安装，安装时别忘记勾选Add Python to PATH这个选项。） 运行GenSMBIOS，输入数字3（Generate SMBIOS/生成SMBIOS）并且回车。 再输入Mac的机型回车 便得到了三码,将其对应填入。 还有一个ROM的空，可以直接把网卡的MAC地址抄过去。在win下按win键+R输入cmd回车，在命令提示符中输入命令ipconfig /all回车查看网卡MAC地址。 点击左侧UEFI，将OpenCanopy.efi前的#去除，启用图形化驱动。 点击APFS，勾选JumpstartHotPlug 点击左侧Misc Boot，将PickerMode改为External以启用OC图形化界面。 将HibernateMode睡眠模式改为Auto自动。 将PickerAttributes改为0。 点击Security，将ExposeSensitiveData改为2。 将Vault改为Optional。（重要） 将ScanPolicy改为0。（0为自动） 将BootProtect改为BootProtect。（将OC引导项锁定在BIOS的第一项） 将DmgLoading改为Any。 将SecureBootModel改为Disabled。 勾选AllowNvramReset 勾选AllowSetDefault 点击Debug，将Target改为0。 配置完成，点击右上角的Save，用下载到的config.plist去替换掉原/EFI/OC/下的config.plist文件。 之后需要补全一下，下载OcBinaryData。点击跳转 下载完成后，将Resources文件夹替换进去，再将Drivers文件夹中的HfsPlus.efi文件复制到/EFI/OC/Drivers/中。 缺少HfsPlus.efi这个hfs文件系统驱动会导致OC识别不到mac的启动盘。 至此，可以将EFI尝试用去引导macOS了。 后续完善 1，定制USB接口。使用Hackintool工具，用U盘拔插的方式将所有接口插过一遍，注意USB3的接口需要再用USB2的设备再拔插一次。删除多余未绿的接口， 给USB接口正确的定义（USB2.0 3.0 内建），将蓝牙所占用的接口内建，选择internal，再导出USBPorts.kext。 导出的文件很多，只用USBPorts.kext就可以了。 修改USBPorts.kext提升USB接口电流，给苹果设备12W快充。在USBPorts.kext上右键，显示包内容，点进Contents文件夹内，用PlistEdit Pro打开 这个Info.plist文件，修改电流相关。 ``` kUSBSleepPortCurrentLimit 3000 kUSBSleepPowerSupply 5100 kUSBWakePortCurrentLimit 3000 kUSBWakePowerSupply 5100 ``` 之后保存好，再将USBPorts.kext放入到/EFI/OC/Kexts/下。删除USBInjectAll.kext,并配置config相关参数。 2，发现睡眠过程中有自动唤醒的问题，查看睡眠日志发现有RTC（Alarm）的问题，编辑config，点击Kernel Patch， 勾选第一个Disable RTC wake scheduling补丁。 查看唤醒日志命令： ``` log show 1d | grep -i \"Wake reason\" ``` 3，制作SSDT-PLUG SSDT-PMCR补丁。参考OC部件 下载OC-little和Maciasl 将这两个补丁保存为aml格式，放入/EFI/OC/ACPI/文件夹内，并且配置config ACPI中相关参数。 注意与OC部件中的说明不同：在SSDT-PMCR中还需要自己加入PPMC，不加可能导致无法正常睡眠。 具体如下： ``` /* * Intel ACPI Component Architecture * AML/ASL+ Disassembler version 20200925 (64-bit version) * Copyright (c) 2000 - 2020 Intel Corporation * * Disassembling to symbolic ASL+ operators * * Disassembly of iASLGqDus3.aml, Fri Jan 29 00:17:25 2021 * * Original Table Header: * Signature \"SSDT\" * Length 0x0000008F (143) * Revision 0x02 * Checksum 0x4B * OEM ID \"APPLE\" * OEM Table ID \"APmc\" * OEM Revision 0x00000000 (0) * Compiler ID \"INTL\" * Compiler Version 0x20200925 (538970405) */ DefinitionBlock (\"\", \"SSDT\", 2, \"APPLE\", \"APmc\", 0x00000000) { External (_SB_.PCI0, DeviceObj) If (_OSI (&quot;Darwin&quot;)) &#123; Scope (_SB.PCI0) &#123; Device (PPMC) &#123; Name (_ADR, 0x001F0002) // _ADR: Address &#125; Device (PMCR) &#123; Name (_HID, EisaId (&quot;APP9876&quot;)) // _HID: Hardware ID Name (_STA, 0x0B) // _STA: Status Name (_CRS, ResourceTemplate () // _CRS: Current Resource Settings &#123; Memory32Fixed (ReadWrite, 0xFE000000, // Address Base 0x00010000, // Address Length ) &#125;) &#125; &#125; &#125; } &lt;hr/&gt; &lt;p&gt;至此我的OC完善结束，日常使用中未发现其他问题。 &lt;br&gt;附件&lt;mark&gt;&lt;b&gt;&lt;q&gt;&lt;a href=&quot;https://goopher.lanzous.com/ixxkelc9bmf&quot;&gt;我的EFI版本0.6.6&lt;/a&gt;&lt;/q&gt;&lt;/b&gt;&lt;/mark&gt; 注意使用我的EFI时请先替换掉原有的三码。 &lt;/p&gt;","categories":[{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"tags":[{"name":"OC配置教程","slug":"OC配置教程","permalink":"https://goopher.tk/tags/OC%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"}],"author":"GOOPHER"}],"categories":[{"name":"MacBook优化","slug":"MacBook优化","permalink":"https://goopher.tk/categories/MacBook%E4%BC%98%E5%8C%96/"},{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/categories/BIOS%E9%AD%94%E6%94%B9/"},{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://goopher.tk/categories/Volantis%E4%B8%BB%E9%A2%98/"},{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"GitHub玩法","slug":"GitHub玩法","permalink":"https://goopher.tk/categories/GitHub%E7%8E%A9%E6%B3%95/"},{"name":"iOS小组件","slug":"iOS小组件","permalink":"https://goopher.tk/categories/iOS%E5%B0%8F%E7%BB%84%E4%BB%B6/"},{"name":"模拟器","slug":"模拟器","permalink":"https://goopher.tk/categories/%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/categories/Hexo/"}],"tags":[{"name":"MacBook降温","slug":"MacBook降温","permalink":"https://goopher.tk/tags/MacBook%E9%99%8D%E6%B8%A9/"},{"name":"MacBook充电计划修改","slug":"MacBook充电计划修改","permalink":"https://goopher.tk/tags/MacBook%E5%85%85%E7%94%B5%E8%AE%A1%E5%88%92%E4%BF%AE%E6%94%B9/"},{"name":"BIOS魔改","slug":"BIOS魔改","permalink":"https://goopher.tk/tags/BIOS%E9%AD%94%E6%94%B9/"},{"name":"教程","slug":"教程","permalink":"https://goopher.tk/tags/%E6%95%99%E7%A8%8B/"},{"name":"Hexo主题","slug":"Hexo主题","permalink":"https://goopher.tk/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"Volantis","slug":"Volantis","permalink":"https://goopher.tk/tags/Volantis/"},{"name":"OpenCore配置","slug":"OpenCore配置","permalink":"https://goopher.tk/tags/OpenCore%E9%85%8D%E7%BD%AE/"},{"name":"OC引导多系统","slug":"OC引导多系统","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E5%A4%9A%E7%B3%BB%E7%BB%9F/"},{"name":"OC引导升级","slug":"OC引导升级","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E5%8D%87%E7%BA%A7/"},{"name":"黑苹果教程","slug":"黑苹果教程","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E6%95%99%E7%A8%8B/"},{"name":"白嫖GitHub","slug":"白嫖GitHub","permalink":"https://goopher.tk/tags/%E7%99%BD%E5%AB%96GitHub/"},{"name":"撸资本主义羊毛","slug":"撸资本主义羊毛","permalink":"https://goopher.tk/tags/%E6%92%B8%E8%B5%84%E6%9C%AC%E4%B8%BB%E4%B9%89%E7%BE%8A%E6%AF%9B/"},{"name":"OC配置教程","slug":"OC配置教程","permalink":"https://goopher.tk/tags/OC%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"Hexo","permalink":"https://goopher.tk/tags/Hexo/"},{"name":"darkmode","slug":"darkmode","permalink":"https://goopher.tk/tags/darkmode/"},{"name":"OpenCore更新","slug":"OpenCore更新","permalink":"https://goopher.tk/tags/OpenCore%E6%9B%B4%E6%96%B0/"},{"name":"黑苹果","slug":"黑苹果","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"黑苹果基础","slug":"黑苹果基础","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9F%BA%E7%A1%80/"},{"name":"efi工具","slug":"efi工具","permalink":"https://goopher.tk/tags/efi%E5%B7%A5%E5%85%B7/"},{"name":"efi驱动","slug":"efi驱动","permalink":"https://goopher.tk/tags/efi%E9%A9%B1%E5%8A%A8/"},{"name":"Scriptable","slug":"Scriptable","permalink":"https://goopher.tk/tags/Scriptable/"},{"name":"iOS小组件","slug":"iOS小组件","permalink":"https://goopher.tk/tags/iOS%E5%B0%8F%E7%BB%84%E4%BB%B6/"},{"name":"Yuzu","slug":"Yuzu","permalink":"https://goopher.tk/tags/Yuzu/"},{"name":"模拟器","slug":"模拟器","permalink":"https://goopher.tk/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"游戏","slug":"游戏","permalink":"https://goopher.tk/tags/%E6%B8%B8%E6%88%8F/"},{"name":"脱离U盘引导","slug":"脱离U盘引导","permalink":"https://goopher.tk/tags/%E8%84%B1%E7%A6%BBU%E7%9B%98%E5%BC%95%E5%AF%BC/"},{"name":"PE","slug":"PE","permalink":"https://goopher.tk/tags/PE/"},{"name":"win引导修复","slug":"win引导修复","permalink":"https://goopher.tk/tags/win%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/"},{"name":"分区教程","slug":"分区教程","permalink":"https://goopher.tk/tags/%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B/"},{"name":"启动盘制作","slug":"启动盘制作","permalink":"https://goopher.tk/tags/%E5%90%AF%E5%8A%A8%E7%9B%98%E5%88%B6%E4%BD%9C/"},{"name":"GitHub Action","slug":"GitHub-Action","permalink":"https://goopher.tk/tags/GitHub-Action/"},{"name":"自动化","slug":"自动化","permalink":"https://goopher.tk/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"Next","slug":"Next","permalink":"https://goopher.tk/tags/Next/"},{"name":"Blog","slug":"Blog","permalink":"https://goopher.tk/tags/Blog/"},{"name":"声卡","slug":"声卡","permalink":"https://goopher.tk/tags/%E5%A3%B0%E5%8D%A1/"},{"name":"AppleALC","slug":"AppleALC","permalink":"https://goopher.tk/tags/AppleALC/"},{"name":"黑苹果前的设置","slug":"黑苹果前的设置","permalink":"https://goopher.tk/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%89%8D%E7%9A%84%E8%AE%BE%E7%BD%AE/"},{"name":"OC引导更新","slug":"OC引导更新","permalink":"https://goopher.tk/tags/OC%E5%BC%95%E5%AF%BC%E6%9B%B4%E6%96%B0/"},{"name":"Clover引导更新","slug":"Clover引导更新","permalink":"https://goopher.tk/tags/Clover%E5%BC%95%E5%AF%BC%E6%9B%B4%E6%96%B0/"}]}